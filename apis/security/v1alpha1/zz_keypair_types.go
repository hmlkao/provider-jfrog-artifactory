// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KeypairInitParameters struct {

	// Will be used as a filename when retrieving the public key via REST API
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Key Pair type. Supported types - GPG and RSA.
	PairType *string `json:"pairType,omitempty" tf:"pair_type,omitempty"`

	// Passphrase will be used to decrypt the private key. Validated server side.
	PassphraseSecretRef *v1.SecretKeySelector `json:"passphraseSecretRef,omitempty" tf:"-"`

	// Private key. PEM format will be validated. Must not include extranous spaces or tabs.
	PrivateKeySecretRef v1.SecretKeySelector `json:"privateKeySecretRef" tf:"-"`

	// Public key. PEM format will be validated. Must not include extranous spaces or tabs.
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`
}

type KeypairObservation struct {

	// Will be used as a filename when retrieving the public key via REST API
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Key Pair type. Supported types - GPG and RSA.
	PairType *string `json:"pairType,omitempty" tf:"pair_type,omitempty"`

	// Public key. PEM format will be validated. Must not include extranous spaces or tabs.
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`
}

type KeypairParameters struct {

	// Will be used as a filename when retrieving the public key via REST API
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Key Pair type. Supported types - GPG and RSA.
	// +kubebuilder:validation:Optional
	PairType *string `json:"pairType,omitempty" tf:"pair_type,omitempty"`

	// Passphrase will be used to decrypt the private key. Validated server side.
	// +kubebuilder:validation:Optional
	PassphraseSecretRef *v1.SecretKeySelector `json:"passphraseSecretRef,omitempty" tf:"-"`

	// Private key. PEM format will be validated. Must not include extranous spaces or tabs.
	// +kubebuilder:validation:Optional
	PrivateKeySecretRef v1.SecretKeySelector `json:"privateKeySecretRef" tf:"-"`

	// Public key. PEM format will be validated. Must not include extranous spaces or tabs.
	// +kubebuilder:validation:Optional
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`
}

// KeypairSpec defines the desired state of Keypair
type KeypairSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KeypairParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider KeypairInitParameters `json:"initProvider,omitempty"`
}

// KeypairStatus defines the observed state of Keypair.
type KeypairStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KeypairObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Keypair is the Schema for the Keypairs API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,artifactory}
type Keypair struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.alias) || (has(self.initProvider) && has(self.initProvider.alias))",message="spec.forProvider.alias is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.pairType) || (has(self.initProvider) && has(self.initProvider.pairType))",message="spec.forProvider.pairType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.privateKeySecretRef)",message="spec.forProvider.privateKeySecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.publicKey) || (has(self.initProvider) && has(self.initProvider.publicKey))",message="spec.forProvider.publicKey is a required parameter"
	Spec   KeypairSpec   `json:"spec"`
	Status KeypairStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeypairList contains a list of Keypairs
type KeypairList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Keypair `json:"items"`
}

// Repository type metadata.
var (
	Keypair_Kind             = "Keypair"
	Keypair_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Keypair_Kind}.String()
	Keypair_KindAPIVersion   = Keypair_Kind + "." + CRDGroupVersion.String()
	Keypair_GroupVersionKind = CRDGroupVersion.WithKind(Keypair_Kind)
)

func init() {
	SchemeBuilder.Register(&Keypair{}, &KeypairList{})
}

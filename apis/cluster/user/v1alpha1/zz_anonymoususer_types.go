// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type AnonymousUserInitParameters struct {
}

type AnonymousUserObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AnonymousUserParameters struct {
}

// AnonymousUserSpec defines the desired state of AnonymousUser
type AnonymousUserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AnonymousUserParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AnonymousUserInitParameters `json:"initProvider,omitempty"`
}

// AnonymousUserStatus defines the observed state of AnonymousUser.
type AnonymousUserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AnonymousUserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AnonymousUser is the Schema for the AnonymousUsers API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,artifactory}
type AnonymousUser struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AnonymousUserSpec   `json:"spec"`
	Status            AnonymousUserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AnonymousUserList contains a list of AnonymousUsers
type AnonymousUserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AnonymousUser `json:"items"`
}

// Repository type metadata.
var (
	AnonymousUser_Kind             = "AnonymousUser"
	AnonymousUser_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AnonymousUser_Kind}.String()
	AnonymousUser_KindAPIVersion   = AnonymousUser_Kind + "." + CRDGroupVersion.String()
	AnonymousUser_GroupVersionKind = CRDGroupVersion.WithKind(AnonymousUser_Kind)
)

func init() {
	SchemeBuilder.Register(&AnonymousUser{}, &AnonymousUserList{})
}

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

// Package cluster contains Kubernetes API for the provider.
package cluster

import (
	"k8s.io/apimachinery/pkg/runtime"

	v1alpha1 "github.com/hmlkao/provider-jfrog-artifactory/apis/cluster/artifact/v1alpha1"
	v1alpha1configuration "github.com/hmlkao/provider-jfrog-artifactory/apis/cluster/configuration/v1alpha1"
	v1alpha1federated "github.com/hmlkao/provider-jfrog-artifactory/apis/cluster/federated/v1alpha1"
	v1alpha1local "github.com/hmlkao/provider-jfrog-artifactory/apis/cluster/local/v1alpha1"
	v1alpha1remote "github.com/hmlkao/provider-jfrog-artifactory/apis/cluster/remote/v1alpha1"
	v1alpha1security "github.com/hmlkao/provider-jfrog-artifactory/apis/cluster/security/v1alpha1"
	v1alpha1user "github.com/hmlkao/provider-jfrog-artifactory/apis/cluster/user/v1alpha1"
	v1alpha1cluster "github.com/hmlkao/provider-jfrog-artifactory/apis/cluster/v1alpha1"
	v1beta1 "github.com/hmlkao/provider-jfrog-artifactory/apis/cluster/v1beta1"
	v1alpha1virtual "github.com/hmlkao/provider-jfrog-artifactory/apis/cluster/virtual/v1alpha1"
)

func init() {
	// Register the types with the Scheme so the components can map objects to GroupVersionKinds and back
	AddToSchemes = append(AddToSchemes,
		v1alpha1.SchemeBuilder.AddToScheme,
		v1alpha1configuration.SchemeBuilder.AddToScheme,
		v1alpha1federated.SchemeBuilder.AddToScheme,
		v1alpha1local.SchemeBuilder.AddToScheme,
		v1alpha1remote.SchemeBuilder.AddToScheme,
		v1alpha1security.SchemeBuilder.AddToScheme,
		v1alpha1user.SchemeBuilder.AddToScheme,
		v1alpha1cluster.SchemeBuilder.AddToScheme,
		v1beta1.SchemeBuilder.AddToScheme,
		v1alpha1virtual.SchemeBuilder.AddToScheme,
	)
}

// AddToSchemes may be used to add all resources defined in the project to a Scheme
var AddToSchemes runtime.SchemeBuilder

// AddToScheme adds all Resources to the Scheme
func AddToScheme(s *runtime.Scheme) error {
	return AddToSchemes.AddToScheme(s)
}

//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AlpineRepository) DeepCopyInto(out *AlpineRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AlpineRepository.
func (in *AlpineRepository) DeepCopy() *AlpineRepository {
	if in == nil {
		return nil
	}
	out := new(AlpineRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AlpineRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AlpineRepositoryInitParameters) DeepCopyInto(out *AlpineRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]ContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AlpineRepositoryInitParameters.
func (in *AlpineRepositoryInitParameters) DeepCopy() *AlpineRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(AlpineRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AlpineRepositoryList) DeepCopyInto(out *AlpineRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]AlpineRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AlpineRepositoryList.
func (in *AlpineRepositoryList) DeepCopy() *AlpineRepositoryList {
	if in == nil {
		return nil
	}
	out := new(AlpineRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AlpineRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AlpineRepositoryObservation) DeepCopyInto(out *AlpineRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]ContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AlpineRepositoryObservation.
func (in *AlpineRepositoryObservation) DeepCopy() *AlpineRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(AlpineRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AlpineRepositoryParameters) DeepCopyInto(out *AlpineRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]ContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AlpineRepositoryParameters.
func (in *AlpineRepositoryParameters) DeepCopy() *AlpineRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(AlpineRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AlpineRepositorySpec) DeepCopyInto(out *AlpineRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AlpineRepositorySpec.
func (in *AlpineRepositorySpec) DeepCopy() *AlpineRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(AlpineRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AlpineRepositoryStatus) DeepCopyInto(out *AlpineRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AlpineRepositoryStatus.
func (in *AlpineRepositoryStatus) DeepCopy() *AlpineRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(AlpineRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AnsibleRepository) DeepCopyInto(out *AnsibleRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AnsibleRepository.
func (in *AnsibleRepository) DeepCopy() *AnsibleRepository {
	if in == nil {
		return nil
	}
	out := new(AnsibleRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AnsibleRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AnsibleRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *AnsibleRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AnsibleRepositoryContentSynchronisationInitParameters.
func (in *AnsibleRepositoryContentSynchronisationInitParameters) DeepCopy() *AnsibleRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(AnsibleRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AnsibleRepositoryContentSynchronisationObservation) DeepCopyInto(out *AnsibleRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AnsibleRepositoryContentSynchronisationObservation.
func (in *AnsibleRepositoryContentSynchronisationObservation) DeepCopy() *AnsibleRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(AnsibleRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AnsibleRepositoryContentSynchronisationParameters) DeepCopyInto(out *AnsibleRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AnsibleRepositoryContentSynchronisationParameters.
func (in *AnsibleRepositoryContentSynchronisationParameters) DeepCopy() *AnsibleRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(AnsibleRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AnsibleRepositoryInitParameters) DeepCopyInto(out *AnsibleRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]AnsibleRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AnsibleRepositoryInitParameters.
func (in *AnsibleRepositoryInitParameters) DeepCopy() *AnsibleRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(AnsibleRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AnsibleRepositoryList) DeepCopyInto(out *AnsibleRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]AnsibleRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AnsibleRepositoryList.
func (in *AnsibleRepositoryList) DeepCopy() *AnsibleRepositoryList {
	if in == nil {
		return nil
	}
	out := new(AnsibleRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AnsibleRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AnsibleRepositoryObservation) DeepCopyInto(out *AnsibleRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]AnsibleRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AnsibleRepositoryObservation.
func (in *AnsibleRepositoryObservation) DeepCopy() *AnsibleRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(AnsibleRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AnsibleRepositoryParameters) DeepCopyInto(out *AnsibleRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]AnsibleRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AnsibleRepositoryParameters.
func (in *AnsibleRepositoryParameters) DeepCopy() *AnsibleRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(AnsibleRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AnsibleRepositorySpec) DeepCopyInto(out *AnsibleRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AnsibleRepositorySpec.
func (in *AnsibleRepositorySpec) DeepCopy() *AnsibleRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(AnsibleRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AnsibleRepositoryStatus) DeepCopyInto(out *AnsibleRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AnsibleRepositoryStatus.
func (in *AnsibleRepositoryStatus) DeepCopy() *AnsibleRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(AnsibleRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BowerRepository) DeepCopyInto(out *BowerRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BowerRepository.
func (in *BowerRepository) DeepCopy() *BowerRepository {
	if in == nil {
		return nil
	}
	out := new(BowerRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BowerRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BowerRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *BowerRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BowerRepositoryContentSynchronisationInitParameters.
func (in *BowerRepositoryContentSynchronisationInitParameters) DeepCopy() *BowerRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(BowerRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BowerRepositoryContentSynchronisationObservation) DeepCopyInto(out *BowerRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BowerRepositoryContentSynchronisationObservation.
func (in *BowerRepositoryContentSynchronisationObservation) DeepCopy() *BowerRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(BowerRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BowerRepositoryContentSynchronisationParameters) DeepCopyInto(out *BowerRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BowerRepositoryContentSynchronisationParameters.
func (in *BowerRepositoryContentSynchronisationParameters) DeepCopy() *BowerRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(BowerRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BowerRepositoryInitParameters) DeepCopyInto(out *BowerRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BowerRegistryURL != nil {
		in, out := &in.BowerRegistryURL, &out.BowerRegistryURL
		*out = new(string)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]BowerRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.VcsGitDownloadURL != nil {
		in, out := &in.VcsGitDownloadURL, &out.VcsGitDownloadURL
		*out = new(string)
		**out = **in
	}
	if in.VcsGitProvider != nil {
		in, out := &in.VcsGitProvider, &out.VcsGitProvider
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BowerRepositoryInitParameters.
func (in *BowerRepositoryInitParameters) DeepCopy() *BowerRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(BowerRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BowerRepositoryList) DeepCopyInto(out *BowerRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]BowerRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BowerRepositoryList.
func (in *BowerRepositoryList) DeepCopy() *BowerRepositoryList {
	if in == nil {
		return nil
	}
	out := new(BowerRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BowerRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BowerRepositoryObservation) DeepCopyInto(out *BowerRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BowerRegistryURL != nil {
		in, out := &in.BowerRegistryURL, &out.BowerRegistryURL
		*out = new(string)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]BowerRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.VcsGitDownloadURL != nil {
		in, out := &in.VcsGitDownloadURL, &out.VcsGitDownloadURL
		*out = new(string)
		**out = **in
	}
	if in.VcsGitProvider != nil {
		in, out := &in.VcsGitProvider, &out.VcsGitProvider
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BowerRepositoryObservation.
func (in *BowerRepositoryObservation) DeepCopy() *BowerRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(BowerRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BowerRepositoryParameters) DeepCopyInto(out *BowerRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BowerRegistryURL != nil {
		in, out := &in.BowerRegistryURL, &out.BowerRegistryURL
		*out = new(string)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]BowerRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.VcsGitDownloadURL != nil {
		in, out := &in.VcsGitDownloadURL, &out.VcsGitDownloadURL
		*out = new(string)
		**out = **in
	}
	if in.VcsGitProvider != nil {
		in, out := &in.VcsGitProvider, &out.VcsGitProvider
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BowerRepositoryParameters.
func (in *BowerRepositoryParameters) DeepCopy() *BowerRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(BowerRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BowerRepositorySpec) DeepCopyInto(out *BowerRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BowerRepositorySpec.
func (in *BowerRepositorySpec) DeepCopy() *BowerRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(BowerRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BowerRepositoryStatus) DeepCopyInto(out *BowerRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BowerRepositoryStatus.
func (in *BowerRepositoryStatus) DeepCopy() *BowerRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(BowerRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CRANRepository) DeepCopyInto(out *CRANRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CRANRepository.
func (in *CRANRepository) DeepCopy() *CRANRepository {
	if in == nil {
		return nil
	}
	out := new(CRANRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CRANRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CRANRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *CRANRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CRANRepositoryContentSynchronisationInitParameters.
func (in *CRANRepositoryContentSynchronisationInitParameters) DeepCopy() *CRANRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(CRANRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CRANRepositoryContentSynchronisationObservation) DeepCopyInto(out *CRANRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CRANRepositoryContentSynchronisationObservation.
func (in *CRANRepositoryContentSynchronisationObservation) DeepCopy() *CRANRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(CRANRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CRANRepositoryContentSynchronisationParameters) DeepCopyInto(out *CRANRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CRANRepositoryContentSynchronisationParameters.
func (in *CRANRepositoryContentSynchronisationParameters) DeepCopy() *CRANRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(CRANRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CRANRepositoryInitParameters) DeepCopyInto(out *CRANRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]CRANRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CRANRepositoryInitParameters.
func (in *CRANRepositoryInitParameters) DeepCopy() *CRANRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(CRANRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CRANRepositoryList) DeepCopyInto(out *CRANRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]CRANRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CRANRepositoryList.
func (in *CRANRepositoryList) DeepCopy() *CRANRepositoryList {
	if in == nil {
		return nil
	}
	out := new(CRANRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CRANRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CRANRepositoryObservation) DeepCopyInto(out *CRANRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]CRANRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CRANRepositoryObservation.
func (in *CRANRepositoryObservation) DeepCopy() *CRANRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(CRANRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CRANRepositoryParameters) DeepCopyInto(out *CRANRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]CRANRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CRANRepositoryParameters.
func (in *CRANRepositoryParameters) DeepCopy() *CRANRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(CRANRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CRANRepositorySpec) DeepCopyInto(out *CRANRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CRANRepositorySpec.
func (in *CRANRepositorySpec) DeepCopy() *CRANRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(CRANRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CRANRepositoryStatus) DeepCopyInto(out *CRANRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CRANRepositoryStatus.
func (in *CRANRepositoryStatus) DeepCopy() *CRANRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(CRANRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CargoRepository) DeepCopyInto(out *CargoRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CargoRepository.
func (in *CargoRepository) DeepCopy() *CargoRepository {
	if in == nil {
		return nil
	}
	out := new(CargoRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CargoRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CargoRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *CargoRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CargoRepositoryContentSynchronisationInitParameters.
func (in *CargoRepositoryContentSynchronisationInitParameters) DeepCopy() *CargoRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(CargoRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CargoRepositoryContentSynchronisationObservation) DeepCopyInto(out *CargoRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CargoRepositoryContentSynchronisationObservation.
func (in *CargoRepositoryContentSynchronisationObservation) DeepCopy() *CargoRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(CargoRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CargoRepositoryContentSynchronisationParameters) DeepCopyInto(out *CargoRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CargoRepositoryContentSynchronisationParameters.
func (in *CargoRepositoryContentSynchronisationParameters) DeepCopy() *CargoRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(CargoRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CargoRepositoryInitParameters) DeepCopyInto(out *CargoRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.AnonymousAccess != nil {
		in, out := &in.AnonymousAccess, &out.AnonymousAccess
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]CargoRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.EnableSparseIndex != nil {
		in, out := &in.EnableSparseIndex, &out.EnableSparseIndex
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.GitRegistryURL != nil {
		in, out := &in.GitRegistryURL, &out.GitRegistryURL
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CargoRepositoryInitParameters.
func (in *CargoRepositoryInitParameters) DeepCopy() *CargoRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(CargoRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CargoRepositoryList) DeepCopyInto(out *CargoRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]CargoRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CargoRepositoryList.
func (in *CargoRepositoryList) DeepCopy() *CargoRepositoryList {
	if in == nil {
		return nil
	}
	out := new(CargoRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CargoRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CargoRepositoryObservation) DeepCopyInto(out *CargoRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.AnonymousAccess != nil {
		in, out := &in.AnonymousAccess, &out.AnonymousAccess
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]CargoRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.EnableSparseIndex != nil {
		in, out := &in.EnableSparseIndex, &out.EnableSparseIndex
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.GitRegistryURL != nil {
		in, out := &in.GitRegistryURL, &out.GitRegistryURL
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CargoRepositoryObservation.
func (in *CargoRepositoryObservation) DeepCopy() *CargoRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(CargoRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CargoRepositoryParameters) DeepCopyInto(out *CargoRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.AnonymousAccess != nil {
		in, out := &in.AnonymousAccess, &out.AnonymousAccess
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]CargoRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.EnableSparseIndex != nil {
		in, out := &in.EnableSparseIndex, &out.EnableSparseIndex
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.GitRegistryURL != nil {
		in, out := &in.GitRegistryURL, &out.GitRegistryURL
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CargoRepositoryParameters.
func (in *CargoRepositoryParameters) DeepCopy() *CargoRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(CargoRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CargoRepositorySpec) DeepCopyInto(out *CargoRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CargoRepositorySpec.
func (in *CargoRepositorySpec) DeepCopy() *CargoRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(CargoRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CargoRepositoryStatus) DeepCopyInto(out *CargoRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CargoRepositoryStatus.
func (in *CargoRepositoryStatus) DeepCopy() *CargoRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(CargoRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ChefRepository) DeepCopyInto(out *ChefRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ChefRepository.
func (in *ChefRepository) DeepCopy() *ChefRepository {
	if in == nil {
		return nil
	}
	out := new(ChefRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ChefRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ChefRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *ChefRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ChefRepositoryContentSynchronisationInitParameters.
func (in *ChefRepositoryContentSynchronisationInitParameters) DeepCopy() *ChefRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(ChefRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ChefRepositoryContentSynchronisationObservation) DeepCopyInto(out *ChefRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ChefRepositoryContentSynchronisationObservation.
func (in *ChefRepositoryContentSynchronisationObservation) DeepCopy() *ChefRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(ChefRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ChefRepositoryContentSynchronisationParameters) DeepCopyInto(out *ChefRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ChefRepositoryContentSynchronisationParameters.
func (in *ChefRepositoryContentSynchronisationParameters) DeepCopy() *ChefRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(ChefRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ChefRepositoryInitParameters) DeepCopyInto(out *ChefRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]ChefRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ChefRepositoryInitParameters.
func (in *ChefRepositoryInitParameters) DeepCopy() *ChefRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(ChefRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ChefRepositoryList) DeepCopyInto(out *ChefRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ChefRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ChefRepositoryList.
func (in *ChefRepositoryList) DeepCopy() *ChefRepositoryList {
	if in == nil {
		return nil
	}
	out := new(ChefRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ChefRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ChefRepositoryObservation) DeepCopyInto(out *ChefRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]ChefRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ChefRepositoryObservation.
func (in *ChefRepositoryObservation) DeepCopy() *ChefRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(ChefRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ChefRepositoryParameters) DeepCopyInto(out *ChefRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]ChefRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ChefRepositoryParameters.
func (in *ChefRepositoryParameters) DeepCopy() *ChefRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(ChefRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ChefRepositorySpec) DeepCopyInto(out *ChefRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ChefRepositorySpec.
func (in *ChefRepositorySpec) DeepCopy() *ChefRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(ChefRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ChefRepositoryStatus) DeepCopyInto(out *ChefRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ChefRepositoryStatus.
func (in *ChefRepositoryStatus) DeepCopy() *ChefRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(ChefRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CocoaPodsRepository) DeepCopyInto(out *CocoaPodsRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CocoaPodsRepository.
func (in *CocoaPodsRepository) DeepCopy() *CocoaPodsRepository {
	if in == nil {
		return nil
	}
	out := new(CocoaPodsRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CocoaPodsRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CocoaPodsRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *CocoaPodsRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CocoaPodsRepositoryContentSynchronisationInitParameters.
func (in *CocoaPodsRepositoryContentSynchronisationInitParameters) DeepCopy() *CocoaPodsRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(CocoaPodsRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CocoaPodsRepositoryContentSynchronisationObservation) DeepCopyInto(out *CocoaPodsRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CocoaPodsRepositoryContentSynchronisationObservation.
func (in *CocoaPodsRepositoryContentSynchronisationObservation) DeepCopy() *CocoaPodsRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(CocoaPodsRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CocoaPodsRepositoryContentSynchronisationParameters) DeepCopyInto(out *CocoaPodsRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CocoaPodsRepositoryContentSynchronisationParameters.
func (in *CocoaPodsRepositoryContentSynchronisationParameters) DeepCopy() *CocoaPodsRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(CocoaPodsRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CocoaPodsRepositoryInitParameters) DeepCopyInto(out *CocoaPodsRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]CocoaPodsRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PodsSpecsRepoURL != nil {
		in, out := &in.PodsSpecsRepoURL, &out.PodsSpecsRepoURL
		*out = new(string)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.VcsGitDownloadURL != nil {
		in, out := &in.VcsGitDownloadURL, &out.VcsGitDownloadURL
		*out = new(string)
		**out = **in
	}
	if in.VcsGitProvider != nil {
		in, out := &in.VcsGitProvider, &out.VcsGitProvider
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CocoaPodsRepositoryInitParameters.
func (in *CocoaPodsRepositoryInitParameters) DeepCopy() *CocoaPodsRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(CocoaPodsRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CocoaPodsRepositoryList) DeepCopyInto(out *CocoaPodsRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]CocoaPodsRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CocoaPodsRepositoryList.
func (in *CocoaPodsRepositoryList) DeepCopy() *CocoaPodsRepositoryList {
	if in == nil {
		return nil
	}
	out := new(CocoaPodsRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CocoaPodsRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CocoaPodsRepositoryObservation) DeepCopyInto(out *CocoaPodsRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]CocoaPodsRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PodsSpecsRepoURL != nil {
		in, out := &in.PodsSpecsRepoURL, &out.PodsSpecsRepoURL
		*out = new(string)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.VcsGitDownloadURL != nil {
		in, out := &in.VcsGitDownloadURL, &out.VcsGitDownloadURL
		*out = new(string)
		**out = **in
	}
	if in.VcsGitProvider != nil {
		in, out := &in.VcsGitProvider, &out.VcsGitProvider
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CocoaPodsRepositoryObservation.
func (in *CocoaPodsRepositoryObservation) DeepCopy() *CocoaPodsRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(CocoaPodsRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CocoaPodsRepositoryParameters) DeepCopyInto(out *CocoaPodsRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]CocoaPodsRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PodsSpecsRepoURL != nil {
		in, out := &in.PodsSpecsRepoURL, &out.PodsSpecsRepoURL
		*out = new(string)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.VcsGitDownloadURL != nil {
		in, out := &in.VcsGitDownloadURL, &out.VcsGitDownloadURL
		*out = new(string)
		**out = **in
	}
	if in.VcsGitProvider != nil {
		in, out := &in.VcsGitProvider, &out.VcsGitProvider
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CocoaPodsRepositoryParameters.
func (in *CocoaPodsRepositoryParameters) DeepCopy() *CocoaPodsRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(CocoaPodsRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CocoaPodsRepositorySpec) DeepCopyInto(out *CocoaPodsRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CocoaPodsRepositorySpec.
func (in *CocoaPodsRepositorySpec) DeepCopy() *CocoaPodsRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(CocoaPodsRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CocoaPodsRepositoryStatus) DeepCopyInto(out *CocoaPodsRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CocoaPodsRepositoryStatus.
func (in *CocoaPodsRepositoryStatus) DeepCopy() *CocoaPodsRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(CocoaPodsRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComposerRepository) DeepCopyInto(out *ComposerRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComposerRepository.
func (in *ComposerRepository) DeepCopy() *ComposerRepository {
	if in == nil {
		return nil
	}
	out := new(ComposerRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ComposerRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComposerRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *ComposerRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComposerRepositoryContentSynchronisationInitParameters.
func (in *ComposerRepositoryContentSynchronisationInitParameters) DeepCopy() *ComposerRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(ComposerRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComposerRepositoryContentSynchronisationObservation) DeepCopyInto(out *ComposerRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComposerRepositoryContentSynchronisationObservation.
func (in *ComposerRepositoryContentSynchronisationObservation) DeepCopy() *ComposerRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(ComposerRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComposerRepositoryContentSynchronisationParameters) DeepCopyInto(out *ComposerRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComposerRepositoryContentSynchronisationParameters.
func (in *ComposerRepositoryContentSynchronisationParameters) DeepCopy() *ComposerRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(ComposerRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComposerRepositoryInitParameters) DeepCopyInto(out *ComposerRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ComposerRegistryURL != nil {
		in, out := &in.ComposerRegistryURL, &out.ComposerRegistryURL
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]ComposerRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.VcsGitDownloadURL != nil {
		in, out := &in.VcsGitDownloadURL, &out.VcsGitDownloadURL
		*out = new(string)
		**out = **in
	}
	if in.VcsGitProvider != nil {
		in, out := &in.VcsGitProvider, &out.VcsGitProvider
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComposerRepositoryInitParameters.
func (in *ComposerRepositoryInitParameters) DeepCopy() *ComposerRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(ComposerRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComposerRepositoryList) DeepCopyInto(out *ComposerRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ComposerRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComposerRepositoryList.
func (in *ComposerRepositoryList) DeepCopy() *ComposerRepositoryList {
	if in == nil {
		return nil
	}
	out := new(ComposerRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ComposerRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComposerRepositoryObservation) DeepCopyInto(out *ComposerRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ComposerRegistryURL != nil {
		in, out := &in.ComposerRegistryURL, &out.ComposerRegistryURL
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]ComposerRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.VcsGitDownloadURL != nil {
		in, out := &in.VcsGitDownloadURL, &out.VcsGitDownloadURL
		*out = new(string)
		**out = **in
	}
	if in.VcsGitProvider != nil {
		in, out := &in.VcsGitProvider, &out.VcsGitProvider
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComposerRepositoryObservation.
func (in *ComposerRepositoryObservation) DeepCopy() *ComposerRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(ComposerRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComposerRepositoryParameters) DeepCopyInto(out *ComposerRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ComposerRegistryURL != nil {
		in, out := &in.ComposerRegistryURL, &out.ComposerRegistryURL
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]ComposerRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.VcsGitDownloadURL != nil {
		in, out := &in.VcsGitDownloadURL, &out.VcsGitDownloadURL
		*out = new(string)
		**out = **in
	}
	if in.VcsGitProvider != nil {
		in, out := &in.VcsGitProvider, &out.VcsGitProvider
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComposerRepositoryParameters.
func (in *ComposerRepositoryParameters) DeepCopy() *ComposerRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(ComposerRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComposerRepositorySpec) DeepCopyInto(out *ComposerRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComposerRepositorySpec.
func (in *ComposerRepositorySpec) DeepCopy() *ComposerRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(ComposerRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComposerRepositoryStatus) DeepCopyInto(out *ComposerRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComposerRepositoryStatus.
func (in *ComposerRepositoryStatus) DeepCopy() *ComposerRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(ComposerRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConanRepository) DeepCopyInto(out *ConanRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConanRepository.
func (in *ConanRepository) DeepCopy() *ConanRepository {
	if in == nil {
		return nil
	}
	out := new(ConanRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConanRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConanRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *ConanRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConanRepositoryContentSynchronisationInitParameters.
func (in *ConanRepositoryContentSynchronisationInitParameters) DeepCopy() *ConanRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(ConanRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConanRepositoryContentSynchronisationObservation) DeepCopyInto(out *ConanRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConanRepositoryContentSynchronisationObservation.
func (in *ConanRepositoryContentSynchronisationObservation) DeepCopy() *ConanRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(ConanRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConanRepositoryContentSynchronisationParameters) DeepCopyInto(out *ConanRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConanRepositoryContentSynchronisationParameters.
func (in *ConanRepositoryContentSynchronisationParameters) DeepCopy() *ConanRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(ConanRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConanRepositoryInitParameters) DeepCopyInto(out *ConanRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]ConanRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ForceConanAuthentication != nil {
		in, out := &in.ForceConanAuthentication, &out.ForceConanAuthentication
		*out = new(bool)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConanRepositoryInitParameters.
func (in *ConanRepositoryInitParameters) DeepCopy() *ConanRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(ConanRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConanRepositoryList) DeepCopyInto(out *ConanRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ConanRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConanRepositoryList.
func (in *ConanRepositoryList) DeepCopy() *ConanRepositoryList {
	if in == nil {
		return nil
	}
	out := new(ConanRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConanRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConanRepositoryObservation) DeepCopyInto(out *ConanRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]ConanRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ForceConanAuthentication != nil {
		in, out := &in.ForceConanAuthentication, &out.ForceConanAuthentication
		*out = new(bool)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConanRepositoryObservation.
func (in *ConanRepositoryObservation) DeepCopy() *ConanRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(ConanRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConanRepositoryParameters) DeepCopyInto(out *ConanRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]ConanRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ForceConanAuthentication != nil {
		in, out := &in.ForceConanAuthentication, &out.ForceConanAuthentication
		*out = new(bool)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConanRepositoryParameters.
func (in *ConanRepositoryParameters) DeepCopy() *ConanRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(ConanRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConanRepositorySpec) DeepCopyInto(out *ConanRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConanRepositorySpec.
func (in *ConanRepositorySpec) DeepCopy() *ConanRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(ConanRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConanRepositoryStatus) DeepCopyInto(out *ConanRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConanRepositoryStatus.
func (in *ConanRepositoryStatus) DeepCopy() *ConanRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(ConanRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CondaRepository) DeepCopyInto(out *CondaRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CondaRepository.
func (in *CondaRepository) DeepCopy() *CondaRepository {
	if in == nil {
		return nil
	}
	out := new(CondaRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CondaRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CondaRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *CondaRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CondaRepositoryContentSynchronisationInitParameters.
func (in *CondaRepositoryContentSynchronisationInitParameters) DeepCopy() *CondaRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(CondaRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CondaRepositoryContentSynchronisationObservation) DeepCopyInto(out *CondaRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CondaRepositoryContentSynchronisationObservation.
func (in *CondaRepositoryContentSynchronisationObservation) DeepCopy() *CondaRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(CondaRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CondaRepositoryContentSynchronisationParameters) DeepCopyInto(out *CondaRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CondaRepositoryContentSynchronisationParameters.
func (in *CondaRepositoryContentSynchronisationParameters) DeepCopy() *CondaRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(CondaRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CondaRepositoryInitParameters) DeepCopyInto(out *CondaRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]CondaRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CondaRepositoryInitParameters.
func (in *CondaRepositoryInitParameters) DeepCopy() *CondaRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(CondaRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CondaRepositoryList) DeepCopyInto(out *CondaRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]CondaRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CondaRepositoryList.
func (in *CondaRepositoryList) DeepCopy() *CondaRepositoryList {
	if in == nil {
		return nil
	}
	out := new(CondaRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CondaRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CondaRepositoryObservation) DeepCopyInto(out *CondaRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]CondaRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CondaRepositoryObservation.
func (in *CondaRepositoryObservation) DeepCopy() *CondaRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(CondaRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CondaRepositoryParameters) DeepCopyInto(out *CondaRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]CondaRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CondaRepositoryParameters.
func (in *CondaRepositoryParameters) DeepCopy() *CondaRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(CondaRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CondaRepositorySpec) DeepCopyInto(out *CondaRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CondaRepositorySpec.
func (in *CondaRepositorySpec) DeepCopy() *CondaRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(CondaRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CondaRepositoryStatus) DeepCopyInto(out *CondaRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CondaRepositoryStatus.
func (in *CondaRepositoryStatus) DeepCopy() *CondaRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(CondaRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContentSynchronisationInitParameters) DeepCopyInto(out *ContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContentSynchronisationInitParameters.
func (in *ContentSynchronisationInitParameters) DeepCopy() *ContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(ContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContentSynchronisationObservation) DeepCopyInto(out *ContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContentSynchronisationObservation.
func (in *ContentSynchronisationObservation) DeepCopy() *ContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(ContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContentSynchronisationParameters) DeepCopyInto(out *ContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContentSynchronisationParameters.
func (in *ContentSynchronisationParameters) DeepCopy() *ContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(ContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DebianRepository) DeepCopyInto(out *DebianRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DebianRepository.
func (in *DebianRepository) DeepCopy() *DebianRepository {
	if in == nil {
		return nil
	}
	out := new(DebianRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DebianRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DebianRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *DebianRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DebianRepositoryContentSynchronisationInitParameters.
func (in *DebianRepositoryContentSynchronisationInitParameters) DeepCopy() *DebianRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(DebianRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DebianRepositoryContentSynchronisationObservation) DeepCopyInto(out *DebianRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DebianRepositoryContentSynchronisationObservation.
func (in *DebianRepositoryContentSynchronisationObservation) DeepCopy() *DebianRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(DebianRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DebianRepositoryContentSynchronisationParameters) DeepCopyInto(out *DebianRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DebianRepositoryContentSynchronisationParameters.
func (in *DebianRepositoryContentSynchronisationParameters) DeepCopy() *DebianRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(DebianRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DebianRepositoryInitParameters) DeepCopyInto(out *DebianRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]DebianRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DebianRepositoryInitParameters.
func (in *DebianRepositoryInitParameters) DeepCopy() *DebianRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(DebianRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DebianRepositoryList) DeepCopyInto(out *DebianRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]DebianRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DebianRepositoryList.
func (in *DebianRepositoryList) DeepCopy() *DebianRepositoryList {
	if in == nil {
		return nil
	}
	out := new(DebianRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DebianRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DebianRepositoryObservation) DeepCopyInto(out *DebianRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]DebianRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DebianRepositoryObservation.
func (in *DebianRepositoryObservation) DeepCopy() *DebianRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(DebianRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DebianRepositoryParameters) DeepCopyInto(out *DebianRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]DebianRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DebianRepositoryParameters.
func (in *DebianRepositoryParameters) DeepCopy() *DebianRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(DebianRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DebianRepositorySpec) DeepCopyInto(out *DebianRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DebianRepositorySpec.
func (in *DebianRepositorySpec) DeepCopy() *DebianRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(DebianRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DebianRepositoryStatus) DeepCopyInto(out *DebianRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DebianRepositoryStatus.
func (in *DebianRepositoryStatus) DeepCopy() *DebianRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(DebianRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DockerRepository) DeepCopyInto(out *DockerRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DockerRepository.
func (in *DockerRepository) DeepCopy() *DockerRepository {
	if in == nil {
		return nil
	}
	out := new(DockerRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DockerRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DockerRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *DockerRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DockerRepositoryContentSynchronisationInitParameters.
func (in *DockerRepositoryContentSynchronisationInitParameters) DeepCopy() *DockerRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(DockerRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DockerRepositoryContentSynchronisationObservation) DeepCopyInto(out *DockerRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DockerRepositoryContentSynchronisationObservation.
func (in *DockerRepositoryContentSynchronisationObservation) DeepCopy() *DockerRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(DockerRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DockerRepositoryContentSynchronisationParameters) DeepCopyInto(out *DockerRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DockerRepositoryContentSynchronisationParameters.
func (in *DockerRepositoryContentSynchronisationParameters) DeepCopy() *DockerRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(DockerRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DockerRepositoryInitParameters) DeepCopyInto(out *DockerRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BlockPushingSchema1 != nil {
		in, out := &in.BlockPushingSchema1, &out.BlockPushingSchema1
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]DockerRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.EnableTokenAuthentication != nil {
		in, out := &in.EnableTokenAuthentication, &out.EnableTokenAuthentication
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ExternalDependenciesEnabled != nil {
		in, out := &in.ExternalDependenciesEnabled, &out.ExternalDependenciesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ExternalDependenciesPatterns != nil {
		in, out := &in.ExternalDependenciesPatterns, &out.ExternalDependenciesPatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DockerRepositoryInitParameters.
func (in *DockerRepositoryInitParameters) DeepCopy() *DockerRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(DockerRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DockerRepositoryList) DeepCopyInto(out *DockerRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]DockerRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DockerRepositoryList.
func (in *DockerRepositoryList) DeepCopy() *DockerRepositoryList {
	if in == nil {
		return nil
	}
	out := new(DockerRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DockerRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DockerRepositoryObservation) DeepCopyInto(out *DockerRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BlockPushingSchema1 != nil {
		in, out := &in.BlockPushingSchema1, &out.BlockPushingSchema1
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]DockerRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.EnableTokenAuthentication != nil {
		in, out := &in.EnableTokenAuthentication, &out.EnableTokenAuthentication
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ExternalDependenciesEnabled != nil {
		in, out := &in.ExternalDependenciesEnabled, &out.ExternalDependenciesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ExternalDependenciesPatterns != nil {
		in, out := &in.ExternalDependenciesPatterns, &out.ExternalDependenciesPatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DockerRepositoryObservation.
func (in *DockerRepositoryObservation) DeepCopy() *DockerRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(DockerRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DockerRepositoryParameters) DeepCopyInto(out *DockerRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BlockPushingSchema1 != nil {
		in, out := &in.BlockPushingSchema1, &out.BlockPushingSchema1
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]DockerRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.EnableTokenAuthentication != nil {
		in, out := &in.EnableTokenAuthentication, &out.EnableTokenAuthentication
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ExternalDependenciesEnabled != nil {
		in, out := &in.ExternalDependenciesEnabled, &out.ExternalDependenciesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ExternalDependenciesPatterns != nil {
		in, out := &in.ExternalDependenciesPatterns, &out.ExternalDependenciesPatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DockerRepositoryParameters.
func (in *DockerRepositoryParameters) DeepCopy() *DockerRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(DockerRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DockerRepositorySpec) DeepCopyInto(out *DockerRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DockerRepositorySpec.
func (in *DockerRepositorySpec) DeepCopy() *DockerRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(DockerRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DockerRepositoryStatus) DeepCopyInto(out *DockerRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DockerRepositoryStatus.
func (in *DockerRepositoryStatus) DeepCopy() *DockerRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(DockerRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GemsRepository) DeepCopyInto(out *GemsRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GemsRepository.
func (in *GemsRepository) DeepCopy() *GemsRepository {
	if in == nil {
		return nil
	}
	out := new(GemsRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GemsRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GemsRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *GemsRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GemsRepositoryContentSynchronisationInitParameters.
func (in *GemsRepositoryContentSynchronisationInitParameters) DeepCopy() *GemsRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(GemsRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GemsRepositoryContentSynchronisationObservation) DeepCopyInto(out *GemsRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GemsRepositoryContentSynchronisationObservation.
func (in *GemsRepositoryContentSynchronisationObservation) DeepCopy() *GemsRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(GemsRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GemsRepositoryContentSynchronisationParameters) DeepCopyInto(out *GemsRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GemsRepositoryContentSynchronisationParameters.
func (in *GemsRepositoryContentSynchronisationParameters) DeepCopy() *GemsRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(GemsRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GemsRepositoryInitParameters) DeepCopyInto(out *GemsRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]GemsRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropagateQueryParams != nil {
		in, out := &in.PropagateQueryParams, &out.PropagateQueryParams
		*out = new(bool)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.RetrieveSha256FromServer != nil {
		in, out := &in.RetrieveSha256FromServer, &out.RetrieveSha256FromServer
		*out = new(bool)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GemsRepositoryInitParameters.
func (in *GemsRepositoryInitParameters) DeepCopy() *GemsRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(GemsRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GemsRepositoryList) DeepCopyInto(out *GemsRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]GemsRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GemsRepositoryList.
func (in *GemsRepositoryList) DeepCopy() *GemsRepositoryList {
	if in == nil {
		return nil
	}
	out := new(GemsRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GemsRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GemsRepositoryObservation) DeepCopyInto(out *GemsRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]GemsRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropagateQueryParams != nil {
		in, out := &in.PropagateQueryParams, &out.PropagateQueryParams
		*out = new(bool)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.RetrieveSha256FromServer != nil {
		in, out := &in.RetrieveSha256FromServer, &out.RetrieveSha256FromServer
		*out = new(bool)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GemsRepositoryObservation.
func (in *GemsRepositoryObservation) DeepCopy() *GemsRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(GemsRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GemsRepositoryParameters) DeepCopyInto(out *GemsRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]GemsRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropagateQueryParams != nil {
		in, out := &in.PropagateQueryParams, &out.PropagateQueryParams
		*out = new(bool)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.RetrieveSha256FromServer != nil {
		in, out := &in.RetrieveSha256FromServer, &out.RetrieveSha256FromServer
		*out = new(bool)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GemsRepositoryParameters.
func (in *GemsRepositoryParameters) DeepCopy() *GemsRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(GemsRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GemsRepositorySpec) DeepCopyInto(out *GemsRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GemsRepositorySpec.
func (in *GemsRepositorySpec) DeepCopy() *GemsRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(GemsRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GemsRepositoryStatus) DeepCopyInto(out *GemsRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GemsRepositoryStatus.
func (in *GemsRepositoryStatus) DeepCopy() *GemsRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(GemsRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GenericRepository) DeepCopyInto(out *GenericRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GenericRepository.
func (in *GenericRepository) DeepCopy() *GenericRepository {
	if in == nil {
		return nil
	}
	out := new(GenericRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GenericRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GenericRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *GenericRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GenericRepositoryContentSynchronisationInitParameters.
func (in *GenericRepositoryContentSynchronisationInitParameters) DeepCopy() *GenericRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(GenericRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GenericRepositoryContentSynchronisationObservation) DeepCopyInto(out *GenericRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GenericRepositoryContentSynchronisationObservation.
func (in *GenericRepositoryContentSynchronisationObservation) DeepCopy() *GenericRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(GenericRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GenericRepositoryContentSynchronisationParameters) DeepCopyInto(out *GenericRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GenericRepositoryContentSynchronisationParameters.
func (in *GenericRepositoryContentSynchronisationParameters) DeepCopy() *GenericRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(GenericRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GenericRepositoryInitParameters) DeepCopyInto(out *GenericRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]GenericRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropagateQueryParams != nil {
		in, out := &in.PropagateQueryParams, &out.PropagateQueryParams
		*out = new(bool)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.RetrieveSha256FromServer != nil {
		in, out := &in.RetrieveSha256FromServer, &out.RetrieveSha256FromServer
		*out = new(bool)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GenericRepositoryInitParameters.
func (in *GenericRepositoryInitParameters) DeepCopy() *GenericRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(GenericRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GenericRepositoryList) DeepCopyInto(out *GenericRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]GenericRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GenericRepositoryList.
func (in *GenericRepositoryList) DeepCopy() *GenericRepositoryList {
	if in == nil {
		return nil
	}
	out := new(GenericRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GenericRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GenericRepositoryObservation) DeepCopyInto(out *GenericRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]GenericRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropagateQueryParams != nil {
		in, out := &in.PropagateQueryParams, &out.PropagateQueryParams
		*out = new(bool)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.RetrieveSha256FromServer != nil {
		in, out := &in.RetrieveSha256FromServer, &out.RetrieveSha256FromServer
		*out = new(bool)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GenericRepositoryObservation.
func (in *GenericRepositoryObservation) DeepCopy() *GenericRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(GenericRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GenericRepositoryParameters) DeepCopyInto(out *GenericRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]GenericRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropagateQueryParams != nil {
		in, out := &in.PropagateQueryParams, &out.PropagateQueryParams
		*out = new(bool)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.RetrieveSha256FromServer != nil {
		in, out := &in.RetrieveSha256FromServer, &out.RetrieveSha256FromServer
		*out = new(bool)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GenericRepositoryParameters.
func (in *GenericRepositoryParameters) DeepCopy() *GenericRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(GenericRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GenericRepositorySpec) DeepCopyInto(out *GenericRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GenericRepositorySpec.
func (in *GenericRepositorySpec) DeepCopy() *GenericRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(GenericRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GenericRepositoryStatus) DeepCopyInto(out *GenericRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GenericRepositoryStatus.
func (in *GenericRepositoryStatus) DeepCopy() *GenericRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(GenericRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitLFSRepository) DeepCopyInto(out *GitLFSRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitLFSRepository.
func (in *GitLFSRepository) DeepCopy() *GitLFSRepository {
	if in == nil {
		return nil
	}
	out := new(GitLFSRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GitLFSRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitLFSRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *GitLFSRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitLFSRepositoryContentSynchronisationInitParameters.
func (in *GitLFSRepositoryContentSynchronisationInitParameters) DeepCopy() *GitLFSRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(GitLFSRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitLFSRepositoryContentSynchronisationObservation) DeepCopyInto(out *GitLFSRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitLFSRepositoryContentSynchronisationObservation.
func (in *GitLFSRepositoryContentSynchronisationObservation) DeepCopy() *GitLFSRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(GitLFSRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitLFSRepositoryContentSynchronisationParameters) DeepCopyInto(out *GitLFSRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitLFSRepositoryContentSynchronisationParameters.
func (in *GitLFSRepositoryContentSynchronisationParameters) DeepCopy() *GitLFSRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(GitLFSRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitLFSRepositoryInitParameters) DeepCopyInto(out *GitLFSRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]GitLFSRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitLFSRepositoryInitParameters.
func (in *GitLFSRepositoryInitParameters) DeepCopy() *GitLFSRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(GitLFSRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitLFSRepositoryList) DeepCopyInto(out *GitLFSRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]GitLFSRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitLFSRepositoryList.
func (in *GitLFSRepositoryList) DeepCopy() *GitLFSRepositoryList {
	if in == nil {
		return nil
	}
	out := new(GitLFSRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GitLFSRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitLFSRepositoryObservation) DeepCopyInto(out *GitLFSRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]GitLFSRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitLFSRepositoryObservation.
func (in *GitLFSRepositoryObservation) DeepCopy() *GitLFSRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(GitLFSRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitLFSRepositoryParameters) DeepCopyInto(out *GitLFSRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]GitLFSRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitLFSRepositoryParameters.
func (in *GitLFSRepositoryParameters) DeepCopy() *GitLFSRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(GitLFSRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitLFSRepositorySpec) DeepCopyInto(out *GitLFSRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitLFSRepositorySpec.
func (in *GitLFSRepositorySpec) DeepCopy() *GitLFSRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(GitLFSRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitLFSRepositoryStatus) DeepCopyInto(out *GitLFSRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitLFSRepositoryStatus.
func (in *GitLFSRepositoryStatus) DeepCopy() *GitLFSRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(GitLFSRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GoRepository) DeepCopyInto(out *GoRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GoRepository.
func (in *GoRepository) DeepCopy() *GoRepository {
	if in == nil {
		return nil
	}
	out := new(GoRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GoRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GoRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *GoRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GoRepositoryContentSynchronisationInitParameters.
func (in *GoRepositoryContentSynchronisationInitParameters) DeepCopy() *GoRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(GoRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GoRepositoryContentSynchronisationObservation) DeepCopyInto(out *GoRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GoRepositoryContentSynchronisationObservation.
func (in *GoRepositoryContentSynchronisationObservation) DeepCopy() *GoRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(GoRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GoRepositoryContentSynchronisationParameters) DeepCopyInto(out *GoRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GoRepositoryContentSynchronisationParameters.
func (in *GoRepositoryContentSynchronisationParameters) DeepCopy() *GoRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(GoRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GoRepositoryInitParameters) DeepCopyInto(out *GoRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]GoRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropagateQueryParams != nil {
		in, out := &in.PropagateQueryParams, &out.PropagateQueryParams
		*out = new(bool)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.RetrieveSha256FromServer != nil {
		in, out := &in.RetrieveSha256FromServer, &out.RetrieveSha256FromServer
		*out = new(bool)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.VcsGitProvider != nil {
		in, out := &in.VcsGitProvider, &out.VcsGitProvider
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GoRepositoryInitParameters.
func (in *GoRepositoryInitParameters) DeepCopy() *GoRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(GoRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GoRepositoryList) DeepCopyInto(out *GoRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]GoRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GoRepositoryList.
func (in *GoRepositoryList) DeepCopy() *GoRepositoryList {
	if in == nil {
		return nil
	}
	out := new(GoRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GoRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GoRepositoryObservation) DeepCopyInto(out *GoRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]GoRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropagateQueryParams != nil {
		in, out := &in.PropagateQueryParams, &out.PropagateQueryParams
		*out = new(bool)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.RetrieveSha256FromServer != nil {
		in, out := &in.RetrieveSha256FromServer, &out.RetrieveSha256FromServer
		*out = new(bool)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.VcsGitProvider != nil {
		in, out := &in.VcsGitProvider, &out.VcsGitProvider
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GoRepositoryObservation.
func (in *GoRepositoryObservation) DeepCopy() *GoRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(GoRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GoRepositoryParameters) DeepCopyInto(out *GoRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]GoRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropagateQueryParams != nil {
		in, out := &in.PropagateQueryParams, &out.PropagateQueryParams
		*out = new(bool)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.RetrieveSha256FromServer != nil {
		in, out := &in.RetrieveSha256FromServer, &out.RetrieveSha256FromServer
		*out = new(bool)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.VcsGitProvider != nil {
		in, out := &in.VcsGitProvider, &out.VcsGitProvider
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GoRepositoryParameters.
func (in *GoRepositoryParameters) DeepCopy() *GoRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(GoRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GoRepositorySpec) DeepCopyInto(out *GoRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GoRepositorySpec.
func (in *GoRepositorySpec) DeepCopy() *GoRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(GoRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GoRepositoryStatus) DeepCopyInto(out *GoRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GoRepositoryStatus.
func (in *GoRepositoryStatus) DeepCopy() *GoRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(GoRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GradleRepository) DeepCopyInto(out *GradleRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GradleRepository.
func (in *GradleRepository) DeepCopy() *GradleRepository {
	if in == nil {
		return nil
	}
	out := new(GradleRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GradleRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GradleRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *GradleRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GradleRepositoryContentSynchronisationInitParameters.
func (in *GradleRepositoryContentSynchronisationInitParameters) DeepCopy() *GradleRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(GradleRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GradleRepositoryContentSynchronisationObservation) DeepCopyInto(out *GradleRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GradleRepositoryContentSynchronisationObservation.
func (in *GradleRepositoryContentSynchronisationObservation) DeepCopy() *GradleRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(GradleRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GradleRepositoryContentSynchronisationParameters) DeepCopyInto(out *GradleRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GradleRepositoryContentSynchronisationParameters.
func (in *GradleRepositoryContentSynchronisationParameters) DeepCopy() *GradleRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(GradleRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GradleRepositoryInitParameters) DeepCopyInto(out *GradleRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]GradleRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.FetchJarsEagerly != nil {
		in, out := &in.FetchJarsEagerly, &out.FetchJarsEagerly
		*out = new(bool)
		**out = **in
	}
	if in.FetchSourcesEagerly != nil {
		in, out := &in.FetchSourcesEagerly, &out.FetchSourcesEagerly
		*out = new(bool)
		**out = **in
	}
	if in.HandleReleases != nil {
		in, out := &in.HandleReleases, &out.HandleReleases
		*out = new(bool)
		**out = **in
	}
	if in.HandleSnapshots != nil {
		in, out := &in.HandleSnapshots, &out.HandleSnapshots
		*out = new(bool)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MaxUniqueSnapshots != nil {
		in, out := &in.MaxUniqueSnapshots, &out.MaxUniqueSnapshots
		*out = new(float64)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RejectInvalidJars != nil {
		in, out := &in.RejectInvalidJars, &out.RejectInvalidJars
		*out = new(bool)
		**out = **in
	}
	if in.RemoteRepoChecksumPolicyType != nil {
		in, out := &in.RemoteRepoChecksumPolicyType, &out.RemoteRepoChecksumPolicyType
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SuppressPomConsistencyChecks != nil {
		in, out := &in.SuppressPomConsistencyChecks, &out.SuppressPomConsistencyChecks
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GradleRepositoryInitParameters.
func (in *GradleRepositoryInitParameters) DeepCopy() *GradleRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(GradleRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GradleRepositoryList) DeepCopyInto(out *GradleRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]GradleRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GradleRepositoryList.
func (in *GradleRepositoryList) DeepCopy() *GradleRepositoryList {
	if in == nil {
		return nil
	}
	out := new(GradleRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GradleRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GradleRepositoryObservation) DeepCopyInto(out *GradleRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]GradleRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.FetchJarsEagerly != nil {
		in, out := &in.FetchJarsEagerly, &out.FetchJarsEagerly
		*out = new(bool)
		**out = **in
	}
	if in.FetchSourcesEagerly != nil {
		in, out := &in.FetchSourcesEagerly, &out.FetchSourcesEagerly
		*out = new(bool)
		**out = **in
	}
	if in.HandleReleases != nil {
		in, out := &in.HandleReleases, &out.HandleReleases
		*out = new(bool)
		**out = **in
	}
	if in.HandleSnapshots != nil {
		in, out := &in.HandleSnapshots, &out.HandleSnapshots
		*out = new(bool)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MaxUniqueSnapshots != nil {
		in, out := &in.MaxUniqueSnapshots, &out.MaxUniqueSnapshots
		*out = new(float64)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RejectInvalidJars != nil {
		in, out := &in.RejectInvalidJars, &out.RejectInvalidJars
		*out = new(bool)
		**out = **in
	}
	if in.RemoteRepoChecksumPolicyType != nil {
		in, out := &in.RemoteRepoChecksumPolicyType, &out.RemoteRepoChecksumPolicyType
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SuppressPomConsistencyChecks != nil {
		in, out := &in.SuppressPomConsistencyChecks, &out.SuppressPomConsistencyChecks
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GradleRepositoryObservation.
func (in *GradleRepositoryObservation) DeepCopy() *GradleRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(GradleRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GradleRepositoryParameters) DeepCopyInto(out *GradleRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]GradleRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.FetchJarsEagerly != nil {
		in, out := &in.FetchJarsEagerly, &out.FetchJarsEagerly
		*out = new(bool)
		**out = **in
	}
	if in.FetchSourcesEagerly != nil {
		in, out := &in.FetchSourcesEagerly, &out.FetchSourcesEagerly
		*out = new(bool)
		**out = **in
	}
	if in.HandleReleases != nil {
		in, out := &in.HandleReleases, &out.HandleReleases
		*out = new(bool)
		**out = **in
	}
	if in.HandleSnapshots != nil {
		in, out := &in.HandleSnapshots, &out.HandleSnapshots
		*out = new(bool)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MaxUniqueSnapshots != nil {
		in, out := &in.MaxUniqueSnapshots, &out.MaxUniqueSnapshots
		*out = new(float64)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RejectInvalidJars != nil {
		in, out := &in.RejectInvalidJars, &out.RejectInvalidJars
		*out = new(bool)
		**out = **in
	}
	if in.RemoteRepoChecksumPolicyType != nil {
		in, out := &in.RemoteRepoChecksumPolicyType, &out.RemoteRepoChecksumPolicyType
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SuppressPomConsistencyChecks != nil {
		in, out := &in.SuppressPomConsistencyChecks, &out.SuppressPomConsistencyChecks
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GradleRepositoryParameters.
func (in *GradleRepositoryParameters) DeepCopy() *GradleRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(GradleRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GradleRepositorySpec) DeepCopyInto(out *GradleRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GradleRepositorySpec.
func (in *GradleRepositorySpec) DeepCopy() *GradleRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(GradleRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GradleRepositoryStatus) DeepCopyInto(out *GradleRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GradleRepositoryStatus.
func (in *GradleRepositoryStatus) DeepCopy() *GradleRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(GradleRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HelmOCIRepository) DeepCopyInto(out *HelmOCIRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HelmOCIRepository.
func (in *HelmOCIRepository) DeepCopy() *HelmOCIRepository {
	if in == nil {
		return nil
	}
	out := new(HelmOCIRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *HelmOCIRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HelmOCIRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *HelmOCIRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HelmOCIRepositoryContentSynchronisationInitParameters.
func (in *HelmOCIRepositoryContentSynchronisationInitParameters) DeepCopy() *HelmOCIRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(HelmOCIRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HelmOCIRepositoryContentSynchronisationObservation) DeepCopyInto(out *HelmOCIRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HelmOCIRepositoryContentSynchronisationObservation.
func (in *HelmOCIRepositoryContentSynchronisationObservation) DeepCopy() *HelmOCIRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(HelmOCIRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HelmOCIRepositoryContentSynchronisationParameters) DeepCopyInto(out *HelmOCIRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HelmOCIRepositoryContentSynchronisationParameters.
func (in *HelmOCIRepositoryContentSynchronisationParameters) DeepCopy() *HelmOCIRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(HelmOCIRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HelmOCIRepositoryInitParameters) DeepCopyInto(out *HelmOCIRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]HelmOCIRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.EnableTokenAuthentication != nil {
		in, out := &in.EnableTokenAuthentication, &out.EnableTokenAuthentication
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ExternalDependenciesEnabled != nil {
		in, out := &in.ExternalDependenciesEnabled, &out.ExternalDependenciesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ExternalDependenciesPatterns != nil {
		in, out := &in.ExternalDependenciesPatterns, &out.ExternalDependenciesPatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HelmOCIRepositoryInitParameters.
func (in *HelmOCIRepositoryInitParameters) DeepCopy() *HelmOCIRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(HelmOCIRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HelmOCIRepositoryList) DeepCopyInto(out *HelmOCIRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]HelmOCIRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HelmOCIRepositoryList.
func (in *HelmOCIRepositoryList) DeepCopy() *HelmOCIRepositoryList {
	if in == nil {
		return nil
	}
	out := new(HelmOCIRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *HelmOCIRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HelmOCIRepositoryObservation) DeepCopyInto(out *HelmOCIRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]HelmOCIRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.EnableTokenAuthentication != nil {
		in, out := &in.EnableTokenAuthentication, &out.EnableTokenAuthentication
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ExternalDependenciesEnabled != nil {
		in, out := &in.ExternalDependenciesEnabled, &out.ExternalDependenciesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ExternalDependenciesPatterns != nil {
		in, out := &in.ExternalDependenciesPatterns, &out.ExternalDependenciesPatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HelmOCIRepositoryObservation.
func (in *HelmOCIRepositoryObservation) DeepCopy() *HelmOCIRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(HelmOCIRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HelmOCIRepositoryParameters) DeepCopyInto(out *HelmOCIRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]HelmOCIRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.EnableTokenAuthentication != nil {
		in, out := &in.EnableTokenAuthentication, &out.EnableTokenAuthentication
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ExternalDependenciesEnabled != nil {
		in, out := &in.ExternalDependenciesEnabled, &out.ExternalDependenciesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ExternalDependenciesPatterns != nil {
		in, out := &in.ExternalDependenciesPatterns, &out.ExternalDependenciesPatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HelmOCIRepositoryParameters.
func (in *HelmOCIRepositoryParameters) DeepCopy() *HelmOCIRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(HelmOCIRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HelmOCIRepositorySpec) DeepCopyInto(out *HelmOCIRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HelmOCIRepositorySpec.
func (in *HelmOCIRepositorySpec) DeepCopy() *HelmOCIRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(HelmOCIRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HelmOCIRepositoryStatus) DeepCopyInto(out *HelmOCIRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HelmOCIRepositoryStatus.
func (in *HelmOCIRepositoryStatus) DeepCopy() *HelmOCIRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(HelmOCIRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HelmRepository) DeepCopyInto(out *HelmRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HelmRepository.
func (in *HelmRepository) DeepCopy() *HelmRepository {
	if in == nil {
		return nil
	}
	out := new(HelmRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *HelmRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HelmRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *HelmRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HelmRepositoryContentSynchronisationInitParameters.
func (in *HelmRepositoryContentSynchronisationInitParameters) DeepCopy() *HelmRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(HelmRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HelmRepositoryContentSynchronisationObservation) DeepCopyInto(out *HelmRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HelmRepositoryContentSynchronisationObservation.
func (in *HelmRepositoryContentSynchronisationObservation) DeepCopy() *HelmRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(HelmRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HelmRepositoryContentSynchronisationParameters) DeepCopyInto(out *HelmRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HelmRepositoryContentSynchronisationParameters.
func (in *HelmRepositoryContentSynchronisationParameters) DeepCopy() *HelmRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(HelmRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HelmRepositoryInitParameters) DeepCopyInto(out *HelmRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]HelmRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ExternalDependenciesEnabled != nil {
		in, out := &in.ExternalDependenciesEnabled, &out.ExternalDependenciesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ExternalDependenciesPatterns != nil {
		in, out := &in.ExternalDependenciesPatterns, &out.ExternalDependenciesPatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.HelmChartsBaseURL != nil {
		in, out := &in.HelmChartsBaseURL, &out.HelmChartsBaseURL
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HelmRepositoryInitParameters.
func (in *HelmRepositoryInitParameters) DeepCopy() *HelmRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(HelmRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HelmRepositoryList) DeepCopyInto(out *HelmRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]HelmRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HelmRepositoryList.
func (in *HelmRepositoryList) DeepCopy() *HelmRepositoryList {
	if in == nil {
		return nil
	}
	out := new(HelmRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *HelmRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HelmRepositoryObservation) DeepCopyInto(out *HelmRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]HelmRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ExternalDependenciesEnabled != nil {
		in, out := &in.ExternalDependenciesEnabled, &out.ExternalDependenciesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ExternalDependenciesPatterns != nil {
		in, out := &in.ExternalDependenciesPatterns, &out.ExternalDependenciesPatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.HelmChartsBaseURL != nil {
		in, out := &in.HelmChartsBaseURL, &out.HelmChartsBaseURL
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HelmRepositoryObservation.
func (in *HelmRepositoryObservation) DeepCopy() *HelmRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(HelmRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HelmRepositoryParameters) DeepCopyInto(out *HelmRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]HelmRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ExternalDependenciesEnabled != nil {
		in, out := &in.ExternalDependenciesEnabled, &out.ExternalDependenciesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ExternalDependenciesPatterns != nil {
		in, out := &in.ExternalDependenciesPatterns, &out.ExternalDependenciesPatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.HelmChartsBaseURL != nil {
		in, out := &in.HelmChartsBaseURL, &out.HelmChartsBaseURL
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HelmRepositoryParameters.
func (in *HelmRepositoryParameters) DeepCopy() *HelmRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(HelmRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HelmRepositorySpec) DeepCopyInto(out *HelmRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HelmRepositorySpec.
func (in *HelmRepositorySpec) DeepCopy() *HelmRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(HelmRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HelmRepositoryStatus) DeepCopyInto(out *HelmRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HelmRepositoryStatus.
func (in *HelmRepositoryStatus) DeepCopy() *HelmRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(HelmRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HuggingFaceMLRepository) DeepCopyInto(out *HuggingFaceMLRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HuggingFaceMLRepository.
func (in *HuggingFaceMLRepository) DeepCopy() *HuggingFaceMLRepository {
	if in == nil {
		return nil
	}
	out := new(HuggingFaceMLRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *HuggingFaceMLRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HuggingFaceMLRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *HuggingFaceMLRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HuggingFaceMLRepositoryContentSynchronisationInitParameters.
func (in *HuggingFaceMLRepositoryContentSynchronisationInitParameters) DeepCopy() *HuggingFaceMLRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(HuggingFaceMLRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HuggingFaceMLRepositoryContentSynchronisationObservation) DeepCopyInto(out *HuggingFaceMLRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HuggingFaceMLRepositoryContentSynchronisationObservation.
func (in *HuggingFaceMLRepositoryContentSynchronisationObservation) DeepCopy() *HuggingFaceMLRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(HuggingFaceMLRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HuggingFaceMLRepositoryContentSynchronisationParameters) DeepCopyInto(out *HuggingFaceMLRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HuggingFaceMLRepositoryContentSynchronisationParameters.
func (in *HuggingFaceMLRepositoryContentSynchronisationParameters) DeepCopy() *HuggingFaceMLRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(HuggingFaceMLRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HuggingFaceMLRepositoryInitParameters) DeepCopyInto(out *HuggingFaceMLRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]HuggingFaceMLRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HuggingFaceMLRepositoryInitParameters.
func (in *HuggingFaceMLRepositoryInitParameters) DeepCopy() *HuggingFaceMLRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(HuggingFaceMLRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HuggingFaceMLRepositoryList) DeepCopyInto(out *HuggingFaceMLRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]HuggingFaceMLRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HuggingFaceMLRepositoryList.
func (in *HuggingFaceMLRepositoryList) DeepCopy() *HuggingFaceMLRepositoryList {
	if in == nil {
		return nil
	}
	out := new(HuggingFaceMLRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *HuggingFaceMLRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HuggingFaceMLRepositoryObservation) DeepCopyInto(out *HuggingFaceMLRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]HuggingFaceMLRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HuggingFaceMLRepositoryObservation.
func (in *HuggingFaceMLRepositoryObservation) DeepCopy() *HuggingFaceMLRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(HuggingFaceMLRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HuggingFaceMLRepositoryParameters) DeepCopyInto(out *HuggingFaceMLRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]HuggingFaceMLRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HuggingFaceMLRepositoryParameters.
func (in *HuggingFaceMLRepositoryParameters) DeepCopy() *HuggingFaceMLRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(HuggingFaceMLRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HuggingFaceMLRepositorySpec) DeepCopyInto(out *HuggingFaceMLRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HuggingFaceMLRepositorySpec.
func (in *HuggingFaceMLRepositorySpec) DeepCopy() *HuggingFaceMLRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(HuggingFaceMLRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HuggingFaceMLRepositoryStatus) DeepCopyInto(out *HuggingFaceMLRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HuggingFaceMLRepositoryStatus.
func (in *HuggingFaceMLRepositoryStatus) DeepCopy() *HuggingFaceMLRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(HuggingFaceMLRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IvyRepository) DeepCopyInto(out *IvyRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IvyRepository.
func (in *IvyRepository) DeepCopy() *IvyRepository {
	if in == nil {
		return nil
	}
	out := new(IvyRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *IvyRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IvyRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *IvyRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IvyRepositoryContentSynchronisationInitParameters.
func (in *IvyRepositoryContentSynchronisationInitParameters) DeepCopy() *IvyRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(IvyRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IvyRepositoryContentSynchronisationObservation) DeepCopyInto(out *IvyRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IvyRepositoryContentSynchronisationObservation.
func (in *IvyRepositoryContentSynchronisationObservation) DeepCopy() *IvyRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(IvyRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IvyRepositoryContentSynchronisationParameters) DeepCopyInto(out *IvyRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IvyRepositoryContentSynchronisationParameters.
func (in *IvyRepositoryContentSynchronisationParameters) DeepCopy() *IvyRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(IvyRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IvyRepositoryInitParameters) DeepCopyInto(out *IvyRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]IvyRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.FetchJarsEagerly != nil {
		in, out := &in.FetchJarsEagerly, &out.FetchJarsEagerly
		*out = new(bool)
		**out = **in
	}
	if in.FetchSourcesEagerly != nil {
		in, out := &in.FetchSourcesEagerly, &out.FetchSourcesEagerly
		*out = new(bool)
		**out = **in
	}
	if in.HandleReleases != nil {
		in, out := &in.HandleReleases, &out.HandleReleases
		*out = new(bool)
		**out = **in
	}
	if in.HandleSnapshots != nil {
		in, out := &in.HandleSnapshots, &out.HandleSnapshots
		*out = new(bool)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MaxUniqueSnapshots != nil {
		in, out := &in.MaxUniqueSnapshots, &out.MaxUniqueSnapshots
		*out = new(float64)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RejectInvalidJars != nil {
		in, out := &in.RejectInvalidJars, &out.RejectInvalidJars
		*out = new(bool)
		**out = **in
	}
	if in.RemoteRepoChecksumPolicyType != nil {
		in, out := &in.RemoteRepoChecksumPolicyType, &out.RemoteRepoChecksumPolicyType
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SuppressPomConsistencyChecks != nil {
		in, out := &in.SuppressPomConsistencyChecks, &out.SuppressPomConsistencyChecks
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IvyRepositoryInitParameters.
func (in *IvyRepositoryInitParameters) DeepCopy() *IvyRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(IvyRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IvyRepositoryList) DeepCopyInto(out *IvyRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]IvyRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IvyRepositoryList.
func (in *IvyRepositoryList) DeepCopy() *IvyRepositoryList {
	if in == nil {
		return nil
	}
	out := new(IvyRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *IvyRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IvyRepositoryObservation) DeepCopyInto(out *IvyRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]IvyRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.FetchJarsEagerly != nil {
		in, out := &in.FetchJarsEagerly, &out.FetchJarsEagerly
		*out = new(bool)
		**out = **in
	}
	if in.FetchSourcesEagerly != nil {
		in, out := &in.FetchSourcesEagerly, &out.FetchSourcesEagerly
		*out = new(bool)
		**out = **in
	}
	if in.HandleReleases != nil {
		in, out := &in.HandleReleases, &out.HandleReleases
		*out = new(bool)
		**out = **in
	}
	if in.HandleSnapshots != nil {
		in, out := &in.HandleSnapshots, &out.HandleSnapshots
		*out = new(bool)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MaxUniqueSnapshots != nil {
		in, out := &in.MaxUniqueSnapshots, &out.MaxUniqueSnapshots
		*out = new(float64)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RejectInvalidJars != nil {
		in, out := &in.RejectInvalidJars, &out.RejectInvalidJars
		*out = new(bool)
		**out = **in
	}
	if in.RemoteRepoChecksumPolicyType != nil {
		in, out := &in.RemoteRepoChecksumPolicyType, &out.RemoteRepoChecksumPolicyType
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SuppressPomConsistencyChecks != nil {
		in, out := &in.SuppressPomConsistencyChecks, &out.SuppressPomConsistencyChecks
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IvyRepositoryObservation.
func (in *IvyRepositoryObservation) DeepCopy() *IvyRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(IvyRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IvyRepositoryParameters) DeepCopyInto(out *IvyRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]IvyRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.FetchJarsEagerly != nil {
		in, out := &in.FetchJarsEagerly, &out.FetchJarsEagerly
		*out = new(bool)
		**out = **in
	}
	if in.FetchSourcesEagerly != nil {
		in, out := &in.FetchSourcesEagerly, &out.FetchSourcesEagerly
		*out = new(bool)
		**out = **in
	}
	if in.HandleReleases != nil {
		in, out := &in.HandleReleases, &out.HandleReleases
		*out = new(bool)
		**out = **in
	}
	if in.HandleSnapshots != nil {
		in, out := &in.HandleSnapshots, &out.HandleSnapshots
		*out = new(bool)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MaxUniqueSnapshots != nil {
		in, out := &in.MaxUniqueSnapshots, &out.MaxUniqueSnapshots
		*out = new(float64)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RejectInvalidJars != nil {
		in, out := &in.RejectInvalidJars, &out.RejectInvalidJars
		*out = new(bool)
		**out = **in
	}
	if in.RemoteRepoChecksumPolicyType != nil {
		in, out := &in.RemoteRepoChecksumPolicyType, &out.RemoteRepoChecksumPolicyType
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SuppressPomConsistencyChecks != nil {
		in, out := &in.SuppressPomConsistencyChecks, &out.SuppressPomConsistencyChecks
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IvyRepositoryParameters.
func (in *IvyRepositoryParameters) DeepCopy() *IvyRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(IvyRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IvyRepositorySpec) DeepCopyInto(out *IvyRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IvyRepositorySpec.
func (in *IvyRepositorySpec) DeepCopy() *IvyRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(IvyRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IvyRepositoryStatus) DeepCopyInto(out *IvyRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IvyRepositoryStatus.
func (in *IvyRepositoryStatus) DeepCopy() *IvyRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(IvyRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MavenRepository) DeepCopyInto(out *MavenRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MavenRepository.
func (in *MavenRepository) DeepCopy() *MavenRepository {
	if in == nil {
		return nil
	}
	out := new(MavenRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MavenRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MavenRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *MavenRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MavenRepositoryContentSynchronisationInitParameters.
func (in *MavenRepositoryContentSynchronisationInitParameters) DeepCopy() *MavenRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(MavenRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MavenRepositoryContentSynchronisationObservation) DeepCopyInto(out *MavenRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MavenRepositoryContentSynchronisationObservation.
func (in *MavenRepositoryContentSynchronisationObservation) DeepCopy() *MavenRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(MavenRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MavenRepositoryContentSynchronisationParameters) DeepCopyInto(out *MavenRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MavenRepositoryContentSynchronisationParameters.
func (in *MavenRepositoryContentSynchronisationParameters) DeepCopy() *MavenRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(MavenRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MavenRepositoryInitParameters) DeepCopyInto(out *MavenRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]MavenRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.FetchJarsEagerly != nil {
		in, out := &in.FetchJarsEagerly, &out.FetchJarsEagerly
		*out = new(bool)
		**out = **in
	}
	if in.FetchSourcesEagerly != nil {
		in, out := &in.FetchSourcesEagerly, &out.FetchSourcesEagerly
		*out = new(bool)
		**out = **in
	}
	if in.HandleReleases != nil {
		in, out := &in.HandleReleases, &out.HandleReleases
		*out = new(bool)
		**out = **in
	}
	if in.HandleSnapshots != nil {
		in, out := &in.HandleSnapshots, &out.HandleSnapshots
		*out = new(bool)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MaxUniqueSnapshots != nil {
		in, out := &in.MaxUniqueSnapshots, &out.MaxUniqueSnapshots
		*out = new(float64)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RejectInvalidJars != nil {
		in, out := &in.RejectInvalidJars, &out.RejectInvalidJars
		*out = new(bool)
		**out = **in
	}
	if in.RemoteRepoChecksumPolicyType != nil {
		in, out := &in.RemoteRepoChecksumPolicyType, &out.RemoteRepoChecksumPolicyType
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SuppressPomConsistencyChecks != nil {
		in, out := &in.SuppressPomConsistencyChecks, &out.SuppressPomConsistencyChecks
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MavenRepositoryInitParameters.
func (in *MavenRepositoryInitParameters) DeepCopy() *MavenRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(MavenRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MavenRepositoryList) DeepCopyInto(out *MavenRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MavenRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MavenRepositoryList.
func (in *MavenRepositoryList) DeepCopy() *MavenRepositoryList {
	if in == nil {
		return nil
	}
	out := new(MavenRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MavenRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MavenRepositoryObservation) DeepCopyInto(out *MavenRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]MavenRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.FetchJarsEagerly != nil {
		in, out := &in.FetchJarsEagerly, &out.FetchJarsEagerly
		*out = new(bool)
		**out = **in
	}
	if in.FetchSourcesEagerly != nil {
		in, out := &in.FetchSourcesEagerly, &out.FetchSourcesEagerly
		*out = new(bool)
		**out = **in
	}
	if in.HandleReleases != nil {
		in, out := &in.HandleReleases, &out.HandleReleases
		*out = new(bool)
		**out = **in
	}
	if in.HandleSnapshots != nil {
		in, out := &in.HandleSnapshots, &out.HandleSnapshots
		*out = new(bool)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MaxUniqueSnapshots != nil {
		in, out := &in.MaxUniqueSnapshots, &out.MaxUniqueSnapshots
		*out = new(float64)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RejectInvalidJars != nil {
		in, out := &in.RejectInvalidJars, &out.RejectInvalidJars
		*out = new(bool)
		**out = **in
	}
	if in.RemoteRepoChecksumPolicyType != nil {
		in, out := &in.RemoteRepoChecksumPolicyType, &out.RemoteRepoChecksumPolicyType
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SuppressPomConsistencyChecks != nil {
		in, out := &in.SuppressPomConsistencyChecks, &out.SuppressPomConsistencyChecks
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MavenRepositoryObservation.
func (in *MavenRepositoryObservation) DeepCopy() *MavenRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(MavenRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MavenRepositoryParameters) DeepCopyInto(out *MavenRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]MavenRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.FetchJarsEagerly != nil {
		in, out := &in.FetchJarsEagerly, &out.FetchJarsEagerly
		*out = new(bool)
		**out = **in
	}
	if in.FetchSourcesEagerly != nil {
		in, out := &in.FetchSourcesEagerly, &out.FetchSourcesEagerly
		*out = new(bool)
		**out = **in
	}
	if in.HandleReleases != nil {
		in, out := &in.HandleReleases, &out.HandleReleases
		*out = new(bool)
		**out = **in
	}
	if in.HandleSnapshots != nil {
		in, out := &in.HandleSnapshots, &out.HandleSnapshots
		*out = new(bool)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MaxUniqueSnapshots != nil {
		in, out := &in.MaxUniqueSnapshots, &out.MaxUniqueSnapshots
		*out = new(float64)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RejectInvalidJars != nil {
		in, out := &in.RejectInvalidJars, &out.RejectInvalidJars
		*out = new(bool)
		**out = **in
	}
	if in.RemoteRepoChecksumPolicyType != nil {
		in, out := &in.RemoteRepoChecksumPolicyType, &out.RemoteRepoChecksumPolicyType
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SuppressPomConsistencyChecks != nil {
		in, out := &in.SuppressPomConsistencyChecks, &out.SuppressPomConsistencyChecks
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MavenRepositoryParameters.
func (in *MavenRepositoryParameters) DeepCopy() *MavenRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(MavenRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MavenRepositorySpec) DeepCopyInto(out *MavenRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MavenRepositorySpec.
func (in *MavenRepositorySpec) DeepCopy() *MavenRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(MavenRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MavenRepositoryStatus) DeepCopyInto(out *MavenRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MavenRepositoryStatus.
func (in *MavenRepositoryStatus) DeepCopy() *MavenRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(MavenRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NPMRepository) DeepCopyInto(out *NPMRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NPMRepository.
func (in *NPMRepository) DeepCopy() *NPMRepository {
	if in == nil {
		return nil
	}
	out := new(NPMRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *NPMRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NPMRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *NPMRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NPMRepositoryContentSynchronisationInitParameters.
func (in *NPMRepositoryContentSynchronisationInitParameters) DeepCopy() *NPMRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(NPMRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NPMRepositoryContentSynchronisationObservation) DeepCopyInto(out *NPMRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NPMRepositoryContentSynchronisationObservation.
func (in *NPMRepositoryContentSynchronisationObservation) DeepCopy() *NPMRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(NPMRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NPMRepositoryContentSynchronisationParameters) DeepCopyInto(out *NPMRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NPMRepositoryContentSynchronisationParameters.
func (in *NPMRepositoryContentSynchronisationParameters) DeepCopy() *NPMRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(NPMRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NPMRepositoryInitParameters) DeepCopyInto(out *NPMRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]NPMRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NPMRepositoryInitParameters.
func (in *NPMRepositoryInitParameters) DeepCopy() *NPMRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(NPMRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NPMRepositoryList) DeepCopyInto(out *NPMRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]NPMRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NPMRepositoryList.
func (in *NPMRepositoryList) DeepCopy() *NPMRepositoryList {
	if in == nil {
		return nil
	}
	out := new(NPMRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *NPMRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NPMRepositoryObservation) DeepCopyInto(out *NPMRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]NPMRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NPMRepositoryObservation.
func (in *NPMRepositoryObservation) DeepCopy() *NPMRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(NPMRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NPMRepositoryParameters) DeepCopyInto(out *NPMRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]NPMRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NPMRepositoryParameters.
func (in *NPMRepositoryParameters) DeepCopy() *NPMRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(NPMRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NPMRepositorySpec) DeepCopyInto(out *NPMRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NPMRepositorySpec.
func (in *NPMRepositorySpec) DeepCopy() *NPMRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(NPMRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NPMRepositoryStatus) DeepCopyInto(out *NPMRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NPMRepositoryStatus.
func (in *NPMRepositoryStatus) DeepCopy() *NPMRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(NPMRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NuGetRepository) DeepCopyInto(out *NuGetRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NuGetRepository.
func (in *NuGetRepository) DeepCopy() *NuGetRepository {
	if in == nil {
		return nil
	}
	out := new(NuGetRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *NuGetRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NuGetRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *NuGetRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NuGetRepositoryContentSynchronisationInitParameters.
func (in *NuGetRepositoryContentSynchronisationInitParameters) DeepCopy() *NuGetRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(NuGetRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NuGetRepositoryContentSynchronisationObservation) DeepCopyInto(out *NuGetRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NuGetRepositoryContentSynchronisationObservation.
func (in *NuGetRepositoryContentSynchronisationObservation) DeepCopy() *NuGetRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(NuGetRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NuGetRepositoryContentSynchronisationParameters) DeepCopyInto(out *NuGetRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NuGetRepositoryContentSynchronisationParameters.
func (in *NuGetRepositoryContentSynchronisationParameters) DeepCopy() *NuGetRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(NuGetRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NuGetRepositoryInitParameters) DeepCopyInto(out *NuGetRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]NuGetRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadContextPath != nil {
		in, out := &in.DownloadContextPath, &out.DownloadContextPath
		*out = new(string)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.FeedContextPath != nil {
		in, out := &in.FeedContextPath, &out.FeedContextPath
		*out = new(string)
		**out = **in
	}
	if in.ForceNugetAuthentication != nil {
		in, out := &in.ForceNugetAuthentication, &out.ForceNugetAuthentication
		*out = new(bool)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SymbolServerURL != nil {
		in, out := &in.SymbolServerURL, &out.SymbolServerURL
		*out = new(string)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.V3FeedURL != nil {
		in, out := &in.V3FeedURL, &out.V3FeedURL
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NuGetRepositoryInitParameters.
func (in *NuGetRepositoryInitParameters) DeepCopy() *NuGetRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(NuGetRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NuGetRepositoryList) DeepCopyInto(out *NuGetRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]NuGetRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NuGetRepositoryList.
func (in *NuGetRepositoryList) DeepCopy() *NuGetRepositoryList {
	if in == nil {
		return nil
	}
	out := new(NuGetRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *NuGetRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NuGetRepositoryObservation) DeepCopyInto(out *NuGetRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]NuGetRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadContextPath != nil {
		in, out := &in.DownloadContextPath, &out.DownloadContextPath
		*out = new(string)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.FeedContextPath != nil {
		in, out := &in.FeedContextPath, &out.FeedContextPath
		*out = new(string)
		**out = **in
	}
	if in.ForceNugetAuthentication != nil {
		in, out := &in.ForceNugetAuthentication, &out.ForceNugetAuthentication
		*out = new(bool)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SymbolServerURL != nil {
		in, out := &in.SymbolServerURL, &out.SymbolServerURL
		*out = new(string)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.V3FeedURL != nil {
		in, out := &in.V3FeedURL, &out.V3FeedURL
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NuGetRepositoryObservation.
func (in *NuGetRepositoryObservation) DeepCopy() *NuGetRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(NuGetRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NuGetRepositoryParameters) DeepCopyInto(out *NuGetRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]NuGetRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadContextPath != nil {
		in, out := &in.DownloadContextPath, &out.DownloadContextPath
		*out = new(string)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.FeedContextPath != nil {
		in, out := &in.FeedContextPath, &out.FeedContextPath
		*out = new(string)
		**out = **in
	}
	if in.ForceNugetAuthentication != nil {
		in, out := &in.ForceNugetAuthentication, &out.ForceNugetAuthentication
		*out = new(bool)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SymbolServerURL != nil {
		in, out := &in.SymbolServerURL, &out.SymbolServerURL
		*out = new(string)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.V3FeedURL != nil {
		in, out := &in.V3FeedURL, &out.V3FeedURL
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NuGetRepositoryParameters.
func (in *NuGetRepositoryParameters) DeepCopy() *NuGetRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(NuGetRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NuGetRepositorySpec) DeepCopyInto(out *NuGetRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NuGetRepositorySpec.
func (in *NuGetRepositorySpec) DeepCopy() *NuGetRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(NuGetRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NuGetRepositoryStatus) DeepCopyInto(out *NuGetRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NuGetRepositoryStatus.
func (in *NuGetRepositoryStatus) DeepCopy() *NuGetRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(NuGetRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OCIRepository) DeepCopyInto(out *OCIRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OCIRepository.
func (in *OCIRepository) DeepCopy() *OCIRepository {
	if in == nil {
		return nil
	}
	out := new(OCIRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *OCIRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OCIRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *OCIRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OCIRepositoryContentSynchronisationInitParameters.
func (in *OCIRepositoryContentSynchronisationInitParameters) DeepCopy() *OCIRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(OCIRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OCIRepositoryContentSynchronisationObservation) DeepCopyInto(out *OCIRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OCIRepositoryContentSynchronisationObservation.
func (in *OCIRepositoryContentSynchronisationObservation) DeepCopy() *OCIRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(OCIRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OCIRepositoryContentSynchronisationParameters) DeepCopyInto(out *OCIRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OCIRepositoryContentSynchronisationParameters.
func (in *OCIRepositoryContentSynchronisationParameters) DeepCopy() *OCIRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(OCIRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OCIRepositoryInitParameters) DeepCopyInto(out *OCIRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]OCIRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.EnableTokenAuthentication != nil {
		in, out := &in.EnableTokenAuthentication, &out.EnableTokenAuthentication
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ExternalDependenciesEnabled != nil {
		in, out := &in.ExternalDependenciesEnabled, &out.ExternalDependenciesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ExternalDependenciesPatterns != nil {
		in, out := &in.ExternalDependenciesPatterns, &out.ExternalDependenciesPatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OCIRepositoryInitParameters.
func (in *OCIRepositoryInitParameters) DeepCopy() *OCIRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(OCIRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OCIRepositoryList) DeepCopyInto(out *OCIRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]OCIRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OCIRepositoryList.
func (in *OCIRepositoryList) DeepCopy() *OCIRepositoryList {
	if in == nil {
		return nil
	}
	out := new(OCIRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *OCIRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OCIRepositoryObservation) DeepCopyInto(out *OCIRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]OCIRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.EnableTokenAuthentication != nil {
		in, out := &in.EnableTokenAuthentication, &out.EnableTokenAuthentication
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ExternalDependenciesEnabled != nil {
		in, out := &in.ExternalDependenciesEnabled, &out.ExternalDependenciesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ExternalDependenciesPatterns != nil {
		in, out := &in.ExternalDependenciesPatterns, &out.ExternalDependenciesPatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OCIRepositoryObservation.
func (in *OCIRepositoryObservation) DeepCopy() *OCIRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(OCIRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OCIRepositoryParameters) DeepCopyInto(out *OCIRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]OCIRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.EnableTokenAuthentication != nil {
		in, out := &in.EnableTokenAuthentication, &out.EnableTokenAuthentication
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ExternalDependenciesEnabled != nil {
		in, out := &in.ExternalDependenciesEnabled, &out.ExternalDependenciesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ExternalDependenciesPatterns != nil {
		in, out := &in.ExternalDependenciesPatterns, &out.ExternalDependenciesPatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OCIRepositoryParameters.
func (in *OCIRepositoryParameters) DeepCopy() *OCIRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(OCIRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OCIRepositorySpec) DeepCopyInto(out *OCIRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OCIRepositorySpec.
func (in *OCIRepositorySpec) DeepCopy() *OCIRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(OCIRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OCIRepositoryStatus) DeepCopyInto(out *OCIRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OCIRepositoryStatus.
func (in *OCIRepositoryStatus) DeepCopy() *OCIRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(OCIRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OPKGRepository) DeepCopyInto(out *OPKGRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OPKGRepository.
func (in *OPKGRepository) DeepCopy() *OPKGRepository {
	if in == nil {
		return nil
	}
	out := new(OPKGRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *OPKGRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OPKGRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *OPKGRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OPKGRepositoryContentSynchronisationInitParameters.
func (in *OPKGRepositoryContentSynchronisationInitParameters) DeepCopy() *OPKGRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(OPKGRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OPKGRepositoryContentSynchronisationObservation) DeepCopyInto(out *OPKGRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OPKGRepositoryContentSynchronisationObservation.
func (in *OPKGRepositoryContentSynchronisationObservation) DeepCopy() *OPKGRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(OPKGRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OPKGRepositoryContentSynchronisationParameters) DeepCopyInto(out *OPKGRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OPKGRepositoryContentSynchronisationParameters.
func (in *OPKGRepositoryContentSynchronisationParameters) DeepCopy() *OPKGRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(OPKGRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OPKGRepositoryInitParameters) DeepCopyInto(out *OPKGRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]OPKGRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OPKGRepositoryInitParameters.
func (in *OPKGRepositoryInitParameters) DeepCopy() *OPKGRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(OPKGRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OPKGRepositoryList) DeepCopyInto(out *OPKGRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]OPKGRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OPKGRepositoryList.
func (in *OPKGRepositoryList) DeepCopy() *OPKGRepositoryList {
	if in == nil {
		return nil
	}
	out := new(OPKGRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *OPKGRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OPKGRepositoryObservation) DeepCopyInto(out *OPKGRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]OPKGRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OPKGRepositoryObservation.
func (in *OPKGRepositoryObservation) DeepCopy() *OPKGRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(OPKGRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OPKGRepositoryParameters) DeepCopyInto(out *OPKGRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]OPKGRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OPKGRepositoryParameters.
func (in *OPKGRepositoryParameters) DeepCopy() *OPKGRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(OPKGRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OPKGRepositorySpec) DeepCopyInto(out *OPKGRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OPKGRepositorySpec.
func (in *OPKGRepositorySpec) DeepCopy() *OPKGRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(OPKGRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OPKGRepositoryStatus) DeepCopyInto(out *OPKGRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OPKGRepositoryStatus.
func (in *OPKGRepositoryStatus) DeepCopy() *OPKGRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(OPKGRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *P2Repository) DeepCopyInto(out *P2Repository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new P2Repository.
func (in *P2Repository) DeepCopy() *P2Repository {
	if in == nil {
		return nil
	}
	out := new(P2Repository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *P2Repository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *P2RepositoryContentSynchronisationInitParameters) DeepCopyInto(out *P2RepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new P2RepositoryContentSynchronisationInitParameters.
func (in *P2RepositoryContentSynchronisationInitParameters) DeepCopy() *P2RepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(P2RepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *P2RepositoryContentSynchronisationObservation) DeepCopyInto(out *P2RepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new P2RepositoryContentSynchronisationObservation.
func (in *P2RepositoryContentSynchronisationObservation) DeepCopy() *P2RepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(P2RepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *P2RepositoryContentSynchronisationParameters) DeepCopyInto(out *P2RepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new P2RepositoryContentSynchronisationParameters.
func (in *P2RepositoryContentSynchronisationParameters) DeepCopy() *P2RepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(P2RepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *P2RepositoryInitParameters) DeepCopyInto(out *P2RepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]P2RepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new P2RepositoryInitParameters.
func (in *P2RepositoryInitParameters) DeepCopy() *P2RepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(P2RepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *P2RepositoryList) DeepCopyInto(out *P2RepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]P2Repository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new P2RepositoryList.
func (in *P2RepositoryList) DeepCopy() *P2RepositoryList {
	if in == nil {
		return nil
	}
	out := new(P2RepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *P2RepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *P2RepositoryObservation) DeepCopyInto(out *P2RepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]P2RepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new P2RepositoryObservation.
func (in *P2RepositoryObservation) DeepCopy() *P2RepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(P2RepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *P2RepositoryParameters) DeepCopyInto(out *P2RepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]P2RepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new P2RepositoryParameters.
func (in *P2RepositoryParameters) DeepCopy() *P2RepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(P2RepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *P2RepositorySpec) DeepCopyInto(out *P2RepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new P2RepositorySpec.
func (in *P2RepositorySpec) DeepCopy() *P2RepositorySpec {
	if in == nil {
		return nil
	}
	out := new(P2RepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *P2RepositoryStatus) DeepCopyInto(out *P2RepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new P2RepositoryStatus.
func (in *P2RepositoryStatus) DeepCopy() *P2RepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(P2RepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PubRepository) DeepCopyInto(out *PubRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PubRepository.
func (in *PubRepository) DeepCopy() *PubRepository {
	if in == nil {
		return nil
	}
	out := new(PubRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PubRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PubRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *PubRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PubRepositoryContentSynchronisationInitParameters.
func (in *PubRepositoryContentSynchronisationInitParameters) DeepCopy() *PubRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(PubRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PubRepositoryContentSynchronisationObservation) DeepCopyInto(out *PubRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PubRepositoryContentSynchronisationObservation.
func (in *PubRepositoryContentSynchronisationObservation) DeepCopy() *PubRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(PubRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PubRepositoryContentSynchronisationParameters) DeepCopyInto(out *PubRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PubRepositoryContentSynchronisationParameters.
func (in *PubRepositoryContentSynchronisationParameters) DeepCopy() *PubRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(PubRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PubRepositoryInitParameters) DeepCopyInto(out *PubRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]PubRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PubRepositoryInitParameters.
func (in *PubRepositoryInitParameters) DeepCopy() *PubRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(PubRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PubRepositoryList) DeepCopyInto(out *PubRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]PubRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PubRepositoryList.
func (in *PubRepositoryList) DeepCopy() *PubRepositoryList {
	if in == nil {
		return nil
	}
	out := new(PubRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PubRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PubRepositoryObservation) DeepCopyInto(out *PubRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]PubRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PubRepositoryObservation.
func (in *PubRepositoryObservation) DeepCopy() *PubRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(PubRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PubRepositoryParameters) DeepCopyInto(out *PubRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]PubRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PubRepositoryParameters.
func (in *PubRepositoryParameters) DeepCopy() *PubRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(PubRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PubRepositorySpec) DeepCopyInto(out *PubRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PubRepositorySpec.
func (in *PubRepositorySpec) DeepCopy() *PubRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(PubRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PubRepositoryStatus) DeepCopyInto(out *PubRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PubRepositoryStatus.
func (in *PubRepositoryStatus) DeepCopy() *PubRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(PubRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PuppetRepository) DeepCopyInto(out *PuppetRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PuppetRepository.
func (in *PuppetRepository) DeepCopy() *PuppetRepository {
	if in == nil {
		return nil
	}
	out := new(PuppetRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PuppetRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PuppetRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *PuppetRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PuppetRepositoryContentSynchronisationInitParameters.
func (in *PuppetRepositoryContentSynchronisationInitParameters) DeepCopy() *PuppetRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(PuppetRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PuppetRepositoryContentSynchronisationObservation) DeepCopyInto(out *PuppetRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PuppetRepositoryContentSynchronisationObservation.
func (in *PuppetRepositoryContentSynchronisationObservation) DeepCopy() *PuppetRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(PuppetRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PuppetRepositoryContentSynchronisationParameters) DeepCopyInto(out *PuppetRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PuppetRepositoryContentSynchronisationParameters.
func (in *PuppetRepositoryContentSynchronisationParameters) DeepCopy() *PuppetRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(PuppetRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PuppetRepositoryInitParameters) DeepCopyInto(out *PuppetRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]PuppetRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PuppetRepositoryInitParameters.
func (in *PuppetRepositoryInitParameters) DeepCopy() *PuppetRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(PuppetRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PuppetRepositoryList) DeepCopyInto(out *PuppetRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]PuppetRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PuppetRepositoryList.
func (in *PuppetRepositoryList) DeepCopy() *PuppetRepositoryList {
	if in == nil {
		return nil
	}
	out := new(PuppetRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PuppetRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PuppetRepositoryObservation) DeepCopyInto(out *PuppetRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]PuppetRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PuppetRepositoryObservation.
func (in *PuppetRepositoryObservation) DeepCopy() *PuppetRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(PuppetRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PuppetRepositoryParameters) DeepCopyInto(out *PuppetRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]PuppetRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PuppetRepositoryParameters.
func (in *PuppetRepositoryParameters) DeepCopy() *PuppetRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(PuppetRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PuppetRepositorySpec) DeepCopyInto(out *PuppetRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PuppetRepositorySpec.
func (in *PuppetRepositorySpec) DeepCopy() *PuppetRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(PuppetRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PuppetRepositoryStatus) DeepCopyInto(out *PuppetRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PuppetRepositoryStatus.
func (in *PuppetRepositoryStatus) DeepCopy() *PuppetRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(PuppetRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PyPIRepository) DeepCopyInto(out *PyPIRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PyPIRepository.
func (in *PyPIRepository) DeepCopy() *PyPIRepository {
	if in == nil {
		return nil
	}
	out := new(PyPIRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PyPIRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PyPIRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *PyPIRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PyPIRepositoryContentSynchronisationInitParameters.
func (in *PyPIRepositoryContentSynchronisationInitParameters) DeepCopy() *PyPIRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(PyPIRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PyPIRepositoryContentSynchronisationObservation) DeepCopyInto(out *PyPIRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PyPIRepositoryContentSynchronisationObservation.
func (in *PyPIRepositoryContentSynchronisationObservation) DeepCopy() *PyPIRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(PyPIRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PyPIRepositoryContentSynchronisationParameters) DeepCopyInto(out *PyPIRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PyPIRepositoryContentSynchronisationParameters.
func (in *PyPIRepositoryContentSynchronisationParameters) DeepCopy() *PyPIRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(PyPIRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PyPIRepositoryInitParameters) DeepCopyInto(out *PyPIRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]PyPIRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.PypiRegistryURL != nil {
		in, out := &in.PypiRegistryURL, &out.PypiRegistryURL
		*out = new(string)
		**out = **in
	}
	if in.PypiRepositorySuffix != nil {
		in, out := &in.PypiRepositorySuffix, &out.PypiRepositorySuffix
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PyPIRepositoryInitParameters.
func (in *PyPIRepositoryInitParameters) DeepCopy() *PyPIRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(PyPIRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PyPIRepositoryList) DeepCopyInto(out *PyPIRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]PyPIRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PyPIRepositoryList.
func (in *PyPIRepositoryList) DeepCopy() *PyPIRepositoryList {
	if in == nil {
		return nil
	}
	out := new(PyPIRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PyPIRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PyPIRepositoryObservation) DeepCopyInto(out *PyPIRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]PyPIRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.PypiRegistryURL != nil {
		in, out := &in.PypiRegistryURL, &out.PypiRegistryURL
		*out = new(string)
		**out = **in
	}
	if in.PypiRepositorySuffix != nil {
		in, out := &in.PypiRepositorySuffix, &out.PypiRepositorySuffix
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PyPIRepositoryObservation.
func (in *PyPIRepositoryObservation) DeepCopy() *PyPIRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(PyPIRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PyPIRepositoryParameters) DeepCopyInto(out *PyPIRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]PyPIRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Curated != nil {
		in, out := &in.Curated, &out.Curated
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.PypiRegistryURL != nil {
		in, out := &in.PypiRegistryURL, &out.PypiRegistryURL
		*out = new(string)
		**out = **in
	}
	if in.PypiRepositorySuffix != nil {
		in, out := &in.PypiRepositorySuffix, &out.PypiRepositorySuffix
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PyPIRepositoryParameters.
func (in *PyPIRepositoryParameters) DeepCopy() *PyPIRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(PyPIRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PyPIRepositorySpec) DeepCopyInto(out *PyPIRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PyPIRepositorySpec.
func (in *PyPIRepositorySpec) DeepCopy() *PyPIRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(PyPIRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PyPIRepositoryStatus) DeepCopyInto(out *PyPIRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PyPIRepositoryStatus.
func (in *PyPIRepositoryStatus) DeepCopy() *PyPIRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(PyPIRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RPMRepository) DeepCopyInto(out *RPMRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RPMRepository.
func (in *RPMRepository) DeepCopy() *RPMRepository {
	if in == nil {
		return nil
	}
	out := new(RPMRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RPMRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RPMRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *RPMRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RPMRepositoryContentSynchronisationInitParameters.
func (in *RPMRepositoryContentSynchronisationInitParameters) DeepCopy() *RPMRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(RPMRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RPMRepositoryContentSynchronisationObservation) DeepCopyInto(out *RPMRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RPMRepositoryContentSynchronisationObservation.
func (in *RPMRepositoryContentSynchronisationObservation) DeepCopy() *RPMRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(RPMRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RPMRepositoryContentSynchronisationParameters) DeepCopyInto(out *RPMRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RPMRepositoryContentSynchronisationParameters.
func (in *RPMRepositoryContentSynchronisationParameters) DeepCopy() *RPMRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(RPMRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RPMRepositoryInitParameters) DeepCopyInto(out *RPMRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]RPMRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RPMRepositoryInitParameters.
func (in *RPMRepositoryInitParameters) DeepCopy() *RPMRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(RPMRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RPMRepositoryList) DeepCopyInto(out *RPMRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RPMRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RPMRepositoryList.
func (in *RPMRepositoryList) DeepCopy() *RPMRepositoryList {
	if in == nil {
		return nil
	}
	out := new(RPMRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RPMRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RPMRepositoryObservation) DeepCopyInto(out *RPMRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]RPMRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RPMRepositoryObservation.
func (in *RPMRepositoryObservation) DeepCopy() *RPMRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(RPMRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RPMRepositoryParameters) DeepCopyInto(out *RPMRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]RPMRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RPMRepositoryParameters.
func (in *RPMRepositoryParameters) DeepCopy() *RPMRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(RPMRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RPMRepositorySpec) DeepCopyInto(out *RPMRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RPMRepositorySpec.
func (in *RPMRepositorySpec) DeepCopy() *RPMRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(RPMRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RPMRepositoryStatus) DeepCopyInto(out *RPMRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RPMRepositoryStatus.
func (in *RPMRepositoryStatus) DeepCopy() *RPMRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(RPMRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SBTRepository) DeepCopyInto(out *SBTRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SBTRepository.
func (in *SBTRepository) DeepCopy() *SBTRepository {
	if in == nil {
		return nil
	}
	out := new(SBTRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SBTRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SBTRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *SBTRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SBTRepositoryContentSynchronisationInitParameters.
func (in *SBTRepositoryContentSynchronisationInitParameters) DeepCopy() *SBTRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(SBTRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SBTRepositoryContentSynchronisationObservation) DeepCopyInto(out *SBTRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SBTRepositoryContentSynchronisationObservation.
func (in *SBTRepositoryContentSynchronisationObservation) DeepCopy() *SBTRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(SBTRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SBTRepositoryContentSynchronisationParameters) DeepCopyInto(out *SBTRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SBTRepositoryContentSynchronisationParameters.
func (in *SBTRepositoryContentSynchronisationParameters) DeepCopy() *SBTRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(SBTRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SBTRepositoryInitParameters) DeepCopyInto(out *SBTRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]SBTRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.FetchJarsEagerly != nil {
		in, out := &in.FetchJarsEagerly, &out.FetchJarsEagerly
		*out = new(bool)
		**out = **in
	}
	if in.FetchSourcesEagerly != nil {
		in, out := &in.FetchSourcesEagerly, &out.FetchSourcesEagerly
		*out = new(bool)
		**out = **in
	}
	if in.HandleReleases != nil {
		in, out := &in.HandleReleases, &out.HandleReleases
		*out = new(bool)
		**out = **in
	}
	if in.HandleSnapshots != nil {
		in, out := &in.HandleSnapshots, &out.HandleSnapshots
		*out = new(bool)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MaxUniqueSnapshots != nil {
		in, out := &in.MaxUniqueSnapshots, &out.MaxUniqueSnapshots
		*out = new(float64)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RejectInvalidJars != nil {
		in, out := &in.RejectInvalidJars, &out.RejectInvalidJars
		*out = new(bool)
		**out = **in
	}
	if in.RemoteRepoChecksumPolicyType != nil {
		in, out := &in.RemoteRepoChecksumPolicyType, &out.RemoteRepoChecksumPolicyType
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SuppressPomConsistencyChecks != nil {
		in, out := &in.SuppressPomConsistencyChecks, &out.SuppressPomConsistencyChecks
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SBTRepositoryInitParameters.
func (in *SBTRepositoryInitParameters) DeepCopy() *SBTRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(SBTRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SBTRepositoryList) DeepCopyInto(out *SBTRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SBTRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SBTRepositoryList.
func (in *SBTRepositoryList) DeepCopy() *SBTRepositoryList {
	if in == nil {
		return nil
	}
	out := new(SBTRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SBTRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SBTRepositoryObservation) DeepCopyInto(out *SBTRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]SBTRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.FetchJarsEagerly != nil {
		in, out := &in.FetchJarsEagerly, &out.FetchJarsEagerly
		*out = new(bool)
		**out = **in
	}
	if in.FetchSourcesEagerly != nil {
		in, out := &in.FetchSourcesEagerly, &out.FetchSourcesEagerly
		*out = new(bool)
		**out = **in
	}
	if in.HandleReleases != nil {
		in, out := &in.HandleReleases, &out.HandleReleases
		*out = new(bool)
		**out = **in
	}
	if in.HandleSnapshots != nil {
		in, out := &in.HandleSnapshots, &out.HandleSnapshots
		*out = new(bool)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MaxUniqueSnapshots != nil {
		in, out := &in.MaxUniqueSnapshots, &out.MaxUniqueSnapshots
		*out = new(float64)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RejectInvalidJars != nil {
		in, out := &in.RejectInvalidJars, &out.RejectInvalidJars
		*out = new(bool)
		**out = **in
	}
	if in.RemoteRepoChecksumPolicyType != nil {
		in, out := &in.RemoteRepoChecksumPolicyType, &out.RemoteRepoChecksumPolicyType
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SuppressPomConsistencyChecks != nil {
		in, out := &in.SuppressPomConsistencyChecks, &out.SuppressPomConsistencyChecks
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SBTRepositoryObservation.
func (in *SBTRepositoryObservation) DeepCopy() *SBTRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(SBTRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SBTRepositoryParameters) DeepCopyInto(out *SBTRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]SBTRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.FetchJarsEagerly != nil {
		in, out := &in.FetchJarsEagerly, &out.FetchJarsEagerly
		*out = new(bool)
		**out = **in
	}
	if in.FetchSourcesEagerly != nil {
		in, out := &in.FetchSourcesEagerly, &out.FetchSourcesEagerly
		*out = new(bool)
		**out = **in
	}
	if in.HandleReleases != nil {
		in, out := &in.HandleReleases, &out.HandleReleases
		*out = new(bool)
		**out = **in
	}
	if in.HandleSnapshots != nil {
		in, out := &in.HandleSnapshots, &out.HandleSnapshots
		*out = new(bool)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MaxUniqueSnapshots != nil {
		in, out := &in.MaxUniqueSnapshots, &out.MaxUniqueSnapshots
		*out = new(float64)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RejectInvalidJars != nil {
		in, out := &in.RejectInvalidJars, &out.RejectInvalidJars
		*out = new(bool)
		**out = **in
	}
	if in.RemoteRepoChecksumPolicyType != nil {
		in, out := &in.RemoteRepoChecksumPolicyType, &out.RemoteRepoChecksumPolicyType
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SuppressPomConsistencyChecks != nil {
		in, out := &in.SuppressPomConsistencyChecks, &out.SuppressPomConsistencyChecks
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SBTRepositoryParameters.
func (in *SBTRepositoryParameters) DeepCopy() *SBTRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(SBTRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SBTRepositorySpec) DeepCopyInto(out *SBTRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SBTRepositorySpec.
func (in *SBTRepositorySpec) DeepCopy() *SBTRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(SBTRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SBTRepositoryStatus) DeepCopyInto(out *SBTRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SBTRepositoryStatus.
func (in *SBTRepositoryStatus) DeepCopy() *SBTRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(SBTRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SwiftRepository) DeepCopyInto(out *SwiftRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SwiftRepository.
func (in *SwiftRepository) DeepCopy() *SwiftRepository {
	if in == nil {
		return nil
	}
	out := new(SwiftRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SwiftRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SwiftRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *SwiftRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SwiftRepositoryContentSynchronisationInitParameters.
func (in *SwiftRepositoryContentSynchronisationInitParameters) DeepCopy() *SwiftRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(SwiftRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SwiftRepositoryContentSynchronisationObservation) DeepCopyInto(out *SwiftRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SwiftRepositoryContentSynchronisationObservation.
func (in *SwiftRepositoryContentSynchronisationObservation) DeepCopy() *SwiftRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(SwiftRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SwiftRepositoryContentSynchronisationParameters) DeepCopyInto(out *SwiftRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SwiftRepositoryContentSynchronisationParameters.
func (in *SwiftRepositoryContentSynchronisationParameters) DeepCopy() *SwiftRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(SwiftRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SwiftRepositoryInitParameters) DeepCopyInto(out *SwiftRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]SwiftRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SwiftRepositoryInitParameters.
func (in *SwiftRepositoryInitParameters) DeepCopy() *SwiftRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(SwiftRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SwiftRepositoryList) DeepCopyInto(out *SwiftRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SwiftRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SwiftRepositoryList.
func (in *SwiftRepositoryList) DeepCopy() *SwiftRepositoryList {
	if in == nil {
		return nil
	}
	out := new(SwiftRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SwiftRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SwiftRepositoryObservation) DeepCopyInto(out *SwiftRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]SwiftRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SwiftRepositoryObservation.
func (in *SwiftRepositoryObservation) DeepCopy() *SwiftRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(SwiftRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SwiftRepositoryParameters) DeepCopyInto(out *SwiftRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]SwiftRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SwiftRepositoryParameters.
func (in *SwiftRepositoryParameters) DeepCopy() *SwiftRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(SwiftRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SwiftRepositorySpec) DeepCopyInto(out *SwiftRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SwiftRepositorySpec.
func (in *SwiftRepositorySpec) DeepCopy() *SwiftRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(SwiftRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SwiftRepositoryStatus) DeepCopyInto(out *SwiftRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SwiftRepositoryStatus.
func (in *SwiftRepositoryStatus) DeepCopy() *SwiftRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(SwiftRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TerraformRepository) DeepCopyInto(out *TerraformRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TerraformRepository.
func (in *TerraformRepository) DeepCopy() *TerraformRepository {
	if in == nil {
		return nil
	}
	out := new(TerraformRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TerraformRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TerraformRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *TerraformRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TerraformRepositoryContentSynchronisationInitParameters.
func (in *TerraformRepositoryContentSynchronisationInitParameters) DeepCopy() *TerraformRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(TerraformRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TerraformRepositoryContentSynchronisationObservation) DeepCopyInto(out *TerraformRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TerraformRepositoryContentSynchronisationObservation.
func (in *TerraformRepositoryContentSynchronisationObservation) DeepCopy() *TerraformRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(TerraformRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TerraformRepositoryContentSynchronisationParameters) DeepCopyInto(out *TerraformRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TerraformRepositoryContentSynchronisationParameters.
func (in *TerraformRepositoryContentSynchronisationParameters) DeepCopy() *TerraformRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(TerraformRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TerraformRepositoryInitParameters) DeepCopyInto(out *TerraformRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]TerraformRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.TerraformProvidersURL != nil {
		in, out := &in.TerraformProvidersURL, &out.TerraformProvidersURL
		*out = new(string)
		**out = **in
	}
	if in.TerraformRegistryURL != nil {
		in, out := &in.TerraformRegistryURL, &out.TerraformRegistryURL
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TerraformRepositoryInitParameters.
func (in *TerraformRepositoryInitParameters) DeepCopy() *TerraformRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(TerraformRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TerraformRepositoryList) DeepCopyInto(out *TerraformRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]TerraformRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TerraformRepositoryList.
func (in *TerraformRepositoryList) DeepCopy() *TerraformRepositoryList {
	if in == nil {
		return nil
	}
	out := new(TerraformRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TerraformRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TerraformRepositoryObservation) DeepCopyInto(out *TerraformRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]TerraformRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.TerraformProvidersURL != nil {
		in, out := &in.TerraformProvidersURL, &out.TerraformProvidersURL
		*out = new(string)
		**out = **in
	}
	if in.TerraformRegistryURL != nil {
		in, out := &in.TerraformRegistryURL, &out.TerraformRegistryURL
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TerraformRepositoryObservation.
func (in *TerraformRepositoryObservation) DeepCopy() *TerraformRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(TerraformRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TerraformRepositoryParameters) DeepCopyInto(out *TerraformRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]TerraformRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.TerraformProvidersURL != nil {
		in, out := &in.TerraformProvidersURL, &out.TerraformProvidersURL
		*out = new(string)
		**out = **in
	}
	if in.TerraformRegistryURL != nil {
		in, out := &in.TerraformRegistryURL, &out.TerraformRegistryURL
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TerraformRepositoryParameters.
func (in *TerraformRepositoryParameters) DeepCopy() *TerraformRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(TerraformRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TerraformRepositorySpec) DeepCopyInto(out *TerraformRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TerraformRepositorySpec.
func (in *TerraformRepositorySpec) DeepCopy() *TerraformRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(TerraformRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TerraformRepositoryStatus) DeepCopyInto(out *TerraformRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TerraformRepositoryStatus.
func (in *TerraformRepositoryStatus) DeepCopy() *TerraformRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(TerraformRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VcsRepository) DeepCopyInto(out *VcsRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VcsRepository.
func (in *VcsRepository) DeepCopy() *VcsRepository {
	if in == nil {
		return nil
	}
	out := new(VcsRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VcsRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VcsRepositoryContentSynchronisationInitParameters) DeepCopyInto(out *VcsRepositoryContentSynchronisationInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VcsRepositoryContentSynchronisationInitParameters.
func (in *VcsRepositoryContentSynchronisationInitParameters) DeepCopy() *VcsRepositoryContentSynchronisationInitParameters {
	if in == nil {
		return nil
	}
	out := new(VcsRepositoryContentSynchronisationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VcsRepositoryContentSynchronisationObservation) DeepCopyInto(out *VcsRepositoryContentSynchronisationObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VcsRepositoryContentSynchronisationObservation.
func (in *VcsRepositoryContentSynchronisationObservation) DeepCopy() *VcsRepositoryContentSynchronisationObservation {
	if in == nil {
		return nil
	}
	out := new(VcsRepositoryContentSynchronisationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VcsRepositoryContentSynchronisationParameters) DeepCopyInto(out *VcsRepositoryContentSynchronisationParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertiesEnabled != nil {
		in, out := &in.PropertiesEnabled, &out.PropertiesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SourceOriginAbsenceDetection != nil {
		in, out := &in.SourceOriginAbsenceDetection, &out.SourceOriginAbsenceDetection
		*out = new(bool)
		**out = **in
	}
	if in.StatisticsEnabled != nil {
		in, out := &in.StatisticsEnabled, &out.StatisticsEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VcsRepositoryContentSynchronisationParameters.
func (in *VcsRepositoryContentSynchronisationParameters) DeepCopy() *VcsRepositoryContentSynchronisationParameters {
	if in == nil {
		return nil
	}
	out := new(VcsRepositoryContentSynchronisationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VcsRepositoryInitParameters) DeepCopyInto(out *VcsRepositoryInitParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]VcsRepositoryContentSynchronisationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MaxUniqueSnapshots != nil {
		in, out := &in.MaxUniqueSnapshots, &out.MaxUniqueSnapshots
		*out = new(float64)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.VcsGitDownloadURL != nil {
		in, out := &in.VcsGitDownloadURL, &out.VcsGitDownloadURL
		*out = new(string)
		**out = **in
	}
	if in.VcsGitProvider != nil {
		in, out := &in.VcsGitProvider, &out.VcsGitProvider
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VcsRepositoryInitParameters.
func (in *VcsRepositoryInitParameters) DeepCopy() *VcsRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(VcsRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VcsRepositoryList) DeepCopyInto(out *VcsRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VcsRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VcsRepositoryList.
func (in *VcsRepositoryList) DeepCopy() *VcsRepositoryList {
	if in == nil {
		return nil
	}
	out := new(VcsRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VcsRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VcsRepositoryObservation) DeepCopyInto(out *VcsRepositoryObservation) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]VcsRepositoryContentSynchronisationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MaxUniqueSnapshots != nil {
		in, out := &in.MaxUniqueSnapshots, &out.MaxUniqueSnapshots
		*out = new(float64)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.VcsGitDownloadURL != nil {
		in, out := &in.VcsGitDownloadURL, &out.VcsGitDownloadURL
		*out = new(string)
		**out = **in
	}
	if in.VcsGitProvider != nil {
		in, out := &in.VcsGitProvider, &out.VcsGitProvider
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VcsRepositoryObservation.
func (in *VcsRepositoryObservation) DeepCopy() *VcsRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(VcsRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VcsRepositoryParameters) DeepCopyInto(out *VcsRepositoryParameters) {
	*out = *in
	if in.AllowAnyHostAuth != nil {
		in, out := &in.AllowAnyHostAuth, &out.AllowAnyHostAuth
		*out = new(bool)
		**out = **in
	}
	if in.ArchiveBrowsingEnabled != nil {
		in, out := &in.ArchiveBrowsingEnabled, &out.ArchiveBrowsingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AssumedOfflinePeriodSecs != nil {
		in, out := &in.AssumedOfflinePeriodSecs, &out.AssumedOfflinePeriodSecs
		*out = new(float64)
		**out = **in
	}
	if in.BlackedOut != nil {
		in, out := &in.BlackedOut, &out.BlackedOut
		*out = new(bool)
		**out = **in
	}
	if in.BlockMismatchingMimeTypes != nil {
		in, out := &in.BlockMismatchingMimeTypes, &out.BlockMismatchingMimeTypes
		*out = new(bool)
		**out = **in
	}
	if in.BypassHeadRequests != nil {
		in, out := &in.BypassHeadRequests, &out.BypassHeadRequests
		*out = new(bool)
		**out = **in
	}
	if in.CdnRedirect != nil {
		in, out := &in.CdnRedirect, &out.CdnRedirect
		*out = new(bool)
		**out = **in
	}
	if in.ClientTLSCertificate != nil {
		in, out := &in.ClientTLSCertificate, &out.ClientTLSCertificate
		*out = new(string)
		**out = **in
	}
	if in.ContentSynchronisation != nil {
		in, out := &in.ContentSynchronisation, &out.ContentSynchronisation
		*out = make([]VcsRepositoryContentSynchronisationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisableProxy != nil {
		in, out := &in.DisableProxy, &out.DisableProxy
		*out = new(bool)
		**out = **in
	}
	if in.DisableURLNormalization != nil {
		in, out := &in.DisableURLNormalization, &out.DisableURLNormalization
		*out = new(bool)
		**out = **in
	}
	if in.DownloadDirect != nil {
		in, out := &in.DownloadDirect, &out.DownloadDirect
		*out = new(bool)
		**out = **in
	}
	if in.EnableCookieManagement != nil {
		in, out := &in.EnableCookieManagement, &out.EnableCookieManagement
		*out = new(bool)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.HardFail != nil {
		in, out := &in.HardFail, &out.HardFail
		*out = new(bool)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ListRemoteFolderItems != nil {
		in, out := &in.ListRemoteFolderItems, &out.ListRemoteFolderItems
		*out = new(bool)
		**out = **in
	}
	if in.LocalAddress != nil {
		in, out := &in.LocalAddress, &out.LocalAddress
		*out = new(string)
		**out = **in
	}
	if in.MaxUniqueSnapshots != nil {
		in, out := &in.MaxUniqueSnapshots, &out.MaxUniqueSnapshots
		*out = new(float64)
		**out = **in
	}
	if in.MetadataRetrievalTimeoutSecs != nil {
		in, out := &in.MetadataRetrievalTimeoutSecs, &out.MetadataRetrievalTimeoutSecs
		*out = new(float64)
		**out = **in
	}
	if in.MismatchingMimeTypesOverrideList != nil {
		in, out := &in.MismatchingMimeTypesOverrideList, &out.MismatchingMimeTypesOverrideList
		*out = new(string)
		**out = **in
	}
	if in.MissedCachePeriodSeconds != nil {
		in, out := &in.MissedCachePeriodSeconds, &out.MissedCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.Offline != nil {
		in, out := &in.Offline, &out.Offline
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.LocalSecretKeySelector)
		**out = **in
	}
	if in.PriorityResolution != nil {
		in, out := &in.PriorityResolution, &out.PriorityResolution
		*out = new(bool)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PropertySets != nil {
		in, out := &in.PropertySets, &out.PropertySets
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = new(string)
		**out = **in
	}
	if in.QueryParams != nil {
		in, out := &in.QueryParams, &out.QueryParams
		*out = new(string)
		**out = **in
	}
	if in.RemoteRepoLayoutRef != nil {
		in, out := &in.RemoteRepoLayoutRef, &out.RemoteRepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ShareConfiguration != nil {
		in, out := &in.ShareConfiguration, &out.ShareConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.SocketTimeoutMillis != nil {
		in, out := &in.SocketTimeoutMillis, &out.SocketTimeoutMillis
		*out = new(float64)
		**out = **in
	}
	if in.StoreArtifactsLocally != nil {
		in, out := &in.StoreArtifactsLocally, &out.StoreArtifactsLocally
		*out = new(bool)
		**out = **in
	}
	if in.SynchronizeProperties != nil {
		in, out := &in.SynchronizeProperties, &out.SynchronizeProperties
		*out = new(bool)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UnusedArtifactsCleanupPeriodHours != nil {
		in, out := &in.UnusedArtifactsCleanupPeriodHours, &out.UnusedArtifactsCleanupPeriodHours
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.VcsGitDownloadURL != nil {
		in, out := &in.VcsGitDownloadURL, &out.VcsGitDownloadURL
		*out = new(string)
		**out = **in
	}
	if in.VcsGitProvider != nil {
		in, out := &in.VcsGitProvider, &out.VcsGitProvider
		*out = new(string)
		**out = **in
	}
	if in.XrayIndex != nil {
		in, out := &in.XrayIndex, &out.XrayIndex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VcsRepositoryParameters.
func (in *VcsRepositoryParameters) DeepCopy() *VcsRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(VcsRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VcsRepositorySpec) DeepCopyInto(out *VcsRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VcsRepositorySpec.
func (in *VcsRepositorySpec) DeepCopy() *VcsRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(VcsRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VcsRepositoryStatus) DeepCopyInto(out *VcsRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VcsRepositoryStatus.
func (in *VcsRepositoryStatus) DeepCopy() *VcsRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(VcsRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

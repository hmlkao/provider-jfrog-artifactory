// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VirtualDockerRepositoryInitParameters struct {

	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts *bool `json:"artifactoryRequestsCanRetrieveRemoteArtifacts,omitempty" tf:"artifactory_requests_can_retrieve_remote_artifacts,omitempty"`

	// Default repository to deploy artifacts.
	DefaultDeploymentRepo *string `json:"defaultDeploymentRepo,omitempty" tf:"default_deployment_repo,omitempty"`

	// Public description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**/z/*`.By default no artifacts are excluded.
	ExcludesPattern *string `json:"excludesPattern,omitempty" tf:"excludes_pattern,omitempty"`

	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**/z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**/*`).
	IncludesPattern *string `json:"includesPattern,omitempty" tf:"includes_pattern,omitempty"`

	// Internal description.
	Notes *string `json:"notes,omitempty" tf:"notes,omitempty"`

	// Before Artifactory 7.53.1, up to 2 values (`DEV` and `PROD`) are allowed. From 7.53.1 to 7.107.1, only one value is allowed. From 7.107.1, multiple values are allowed.The attribute should only be used if the repository is already assigned to the existing project.
	// +listType=set
	ProjectEnvironments []*string `json:"projectEnvironments,omitempty" tf:"project_environments,omitempty"`

	// Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey *string `json:"projectKey,omitempty" tf:"project_key,omitempty"`

	// Repository layout key for the virtual repository
	RepoLayoutRef *string `json:"repoLayoutRef,omitempty" tf:"repo_layout_ref,omitempty"`

	// The effective list of actual repositories included in this virtual repository.
	Repositories []*string `json:"repositories,omitempty" tf:"repositories,omitempty"`

	// When enabled, in cases where the same Docker tag exists in two or more of the aggregated repositories, Artifactory will return the tag that has the latest timestamp.
	ResolveDockerTagsByTimestamp *bool `json:"resolveDockerTagsByTimestamp,omitempty" tf:"resolve_docker_tags_by_timestamp,omitempty"`
}

type VirtualDockerRepositoryObservation struct {

	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by another Artifactory instance.
	ArtifactoryRequestsCanRetrieveRemoteArtifacts *bool `json:"artifactoryRequestsCanRetrieveRemoteArtifacts,omitempty" tf:"artifactory_requests_can_retrieve_remote_artifacts,omitempty"`

	// Default repository to deploy artifacts.
	DefaultDeploymentRepo *string `json:"defaultDeploymentRepo,omitempty" tf:"default_deployment_repo,omitempty"`

	// Public description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**/z/*`.By default no artifacts are excluded.
	ExcludesPattern *string `json:"excludesPattern,omitempty" tf:"excludes_pattern,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**/z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**/*`).
	IncludesPattern *string `json:"includesPattern,omitempty" tf:"includes_pattern,omitempty"`

	// Internal description.
	Notes *string `json:"notes,omitempty" tf:"notes,omitempty"`

	PackageType *string `json:"packageType,omitempty" tf:"package_type,omitempty"`

	// Before Artifactory 7.53.1, up to 2 values (`DEV` and `PROD`) are allowed. From 7.53.1 to 7.107.1, only one value is allowed. From 7.107.1, multiple values are allowed.The attribute should only be used if the repository is already assigned to the existing project.
	// +listType=set
	ProjectEnvironments []*string `json:"projectEnvironments,omitempty" tf:"project_environments,omitempty"`

	// Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	ProjectKey *string `json:"projectKey,omitempty" tf:"project_key,omitempty"`

	// Repository layout key for the virtual repository
	RepoLayoutRef *string `json:"repoLayoutRef,omitempty" tf:"repo_layout_ref,omitempty"`

	// The effective list of actual repositories included in this virtual repository.
	Repositories []*string `json:"repositories,omitempty" tf:"repositories,omitempty"`

	// When enabled, in cases where the same Docker tag exists in two or more of the aggregated repositories, Artifactory will return the tag that has the latest timestamp.
	ResolveDockerTagsByTimestamp *bool `json:"resolveDockerTagsByTimestamp,omitempty" tf:"resolve_docker_tags_by_timestamp,omitempty"`
}

type VirtualDockerRepositoryParameters struct {

	// Whether the virtual repository should search through remote repositories when trying to resolve an artifact requested by another Artifactory instance.
	// +kubebuilder:validation:Optional
	ArtifactoryRequestsCanRetrieveRemoteArtifacts *bool `json:"artifactoryRequestsCanRetrieveRemoteArtifacts,omitempty" tf:"artifactory_requests_can_retrieve_remote_artifacts,omitempty"`

	// Default repository to deploy artifacts.
	// +kubebuilder:validation:Optional
	DefaultDeploymentRepo *string `json:"defaultDeploymentRepo,omitempty" tf:"default_deployment_repo,omitempty"`

	// Public description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// List of artifact patterns to exclude when evaluating artifact requests, in the form of `x/y/**/z/*`.By default no artifacts are excluded.
	// +kubebuilder:validation:Optional
	ExcludesPattern *string `json:"excludesPattern,omitempty" tf:"excludes_pattern,omitempty"`

	// List of comma-separated artifact patterns to include when evaluating artifact requests in the form of `x/y/**/z/*`. When used, only artifacts matching one of the include patterns are served. By default, all artifacts are included (`**/*`).
	// +kubebuilder:validation:Optional
	IncludesPattern *string `json:"includesPattern,omitempty" tf:"includes_pattern,omitempty"`

	// Internal description.
	// +kubebuilder:validation:Optional
	Notes *string `json:"notes,omitempty" tf:"notes,omitempty"`

	// Before Artifactory 7.53.1, up to 2 values (`DEV` and `PROD`) are allowed. From 7.53.1 to 7.107.1, only one value is allowed. From 7.107.1, multiple values are allowed.The attribute should only be used if the repository is already assigned to the existing project.
	// +kubebuilder:validation:Optional
	// +listType=set
	ProjectEnvironments []*string `json:"projectEnvironments,omitempty" tf:"project_environments,omitempty"`

	// Project key for assigning this repository to. Must be 2 - 32 lowercase alphanumeric and hyphen characters. When assigning repository to a project, repository key must be prefixed with project key, separated by a dash.
	// +kubebuilder:validation:Optional
	ProjectKey *string `json:"projectKey,omitempty" tf:"project_key,omitempty"`

	// Repository layout key for the virtual repository
	// +kubebuilder:validation:Optional
	RepoLayoutRef *string `json:"repoLayoutRef,omitempty" tf:"repo_layout_ref,omitempty"`

	// The effective list of actual repositories included in this virtual repository.
	// +kubebuilder:validation:Optional
	Repositories []*string `json:"repositories,omitempty" tf:"repositories,omitempty"`

	// When enabled, in cases where the same Docker tag exists in two or more of the aggregated repositories, Artifactory will return the tag that has the latest timestamp.
	// +kubebuilder:validation:Optional
	ResolveDockerTagsByTimestamp *bool `json:"resolveDockerTagsByTimestamp,omitempty" tf:"resolve_docker_tags_by_timestamp,omitempty"`
}

// VirtualDockerRepositorySpec defines the desired state of VirtualDockerRepository
type VirtualDockerRepositorySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VirtualDockerRepositoryParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VirtualDockerRepositoryInitParameters `json:"initProvider,omitempty"`
}

// VirtualDockerRepositoryStatus defines the observed state of VirtualDockerRepository.
type VirtualDockerRepositoryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VirtualDockerRepositoryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VirtualDockerRepository is the Schema for the VirtualDockerRepositorys API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,artifactory}
type VirtualDockerRepository struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualDockerRepositorySpec   `json:"spec"`
	Status            VirtualDockerRepositoryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualDockerRepositoryList contains a list of VirtualDockerRepositorys
type VirtualDockerRepositoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualDockerRepository `json:"items"`
}

// Repository type metadata.
var (
	VirtualDockerRepository_Kind             = "VirtualDockerRepository"
	VirtualDockerRepository_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VirtualDockerRepository_Kind}.String()
	VirtualDockerRepository_KindAPIVersion   = VirtualDockerRepository_Kind + "." + CRDGroupVersion.String()
	VirtualDockerRepository_GroupVersionKind = CRDGroupVersion.WithKind(VirtualDockerRepository_Kind)
)

func init() {
	SchemeBuilder.Register(&VirtualDockerRepository{}, &VirtualDockerRepositoryList{})
}
